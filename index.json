[{"uri":"https://fsprojects.github.io/FSharpLint/index.html","title":"Overview","content":"\n# Overview\n\nFSharpLint is a style checking tool for F#. It points out locations where a set of rules on how F# is to be styled have been broken.\nThe tool is configurable via JSON and can be run from a console app, or as an MSBuild task. It also provides an interface to easily integrate the tool into other software.\n\nThe project aims to let the user know of problems through [matching user defined hints](./how-tos/rules/FL0065.html)\na la [HLint](http://community.haskell.org/~ndm/hlint/), and also by using custom rules written in F# similar to the rules\nin [Mascot](http://mascot.x9c.fr/manual.html) and [StyleCop](http://stylecop.codeplex.com/).\n\nUsing a `.fsproj` (F# project) or `.sln` (F# solution) file the tool will analyse all of the F# implementation files in the project/solution looking for\ncode that breaks a set of rules governing the style of the code. Examples of rules: lambda functions must be less than 6 lines long, class member identifiers must be PascalCase.\n\n## Usage\n\nFSharpLint can be used in several ways:\n\n* [Running as dotnet tool from command line](./how-tos/install-dotnet-tool.html).\n* [In VS Code using the Ionide-FSharp plugin](https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-fsharp).\n* [In other IDEs (Visual Studio, Rider) as an MSBuild Task](./how-tos/msbuild-task.html).\n* [In other editors through FsAutoComplete Language Server](https://github.com/fsharp/FsAutoComplete)\n\n### Example Usage\n\nThe following program:\n\n    type ExampleInterface =\n       abstract member print : unit -> unit\n\n    [<EntryPoint>]\n    let main argv =\n        let x = List.fold (fun x y -> x + y) 0 [1;2;3]\n        printfn \"%d\" x\n        0\n\nRun against the lint tool generates the following errors:\n\n    FL0036: Consider changing `ExampleInterface` to be prefixed with `I`.\n    Consider changing `ExampleInterface` to be prefixed with `I`.\n    Error in file Program.fs on line 1 starting at column 5\n    type ExampleInterface =\n         ^\n\n    FL0045: Consider changing `print` to PascalCase.\n    Error in file Program.fs on line 2 starting at column 19\n       abstract member print : unit -> unit\n                       ^\n\n    FL0034: If `( + )` has no mutable arguments partially applied then the lambda can be removed.\n    Error in file Program.fs on line 6 starting at column 23\n        let x = List.fold (fun x y -> x + y) 0 [1;2;3]\n                           ^\n\nRefactored using lint's warnings:\n\n    type IExampleInterface =\n       abstract member Print : unit -> unit\n\n    [<EntryPoint>]\n    let main argv =\n        let x = List.fold (+) 0 [1;2;3]\n        printfn \"%d\" x\n        0\n\nIf we run lint again it will find a new error, it's worth running the tool until it no longer finds any errors:\n\n    FL0065: `List.fold ( + ) 0 x` might be able to be refactored into `List.sum x`.\n    Error in file Program.fs on line 6 starting at column 12\n    let x = List.fold (+) 0 [1;2;3]\n            ^\n\nAfter refactoring again we have with no lint errors:\n\n    type IExampleInterface =\n       abstract member Print : unit -> unit\n\n    [<EntryPoint>]\n    let main argv =\n        let x = List.sum [1;2;3]\n        printfn \"%d\" x\n        0\n\n## Configuration Files\n\nConfiguration of the tool is done using JSON.\nA single JSON file containing the default configuration for all rules\nis [included inside of the software](https://github.com/fsprojects/FSharpLint/blob/master/src/FSharpLint.Core/fsharplint.json).\n\nBy default, FSharpLint will use the default configuration. You can override this to point\nto a different file, for example by using the `--lint-config` flag in the dotnet tool.\n\nSee the [Rule Configuration page](./how-tos/rule-configuration.html) for more info.\n\n## Suppressing rules in code\n\nRules can be disabled within the code using structured comments. See the [Suppressing Warnings](./how-tos/rule-suppression.html) page for more information.\n\n## Running Lint From An Application\n\nInstall the [`FSharp.Core` nuget package](https://www.nuget.org/packages/FSharpLint.Core/).\n\nThe namespace `FSharpLint.Application` contains a module named `Lint` which provides several functions\nto lint a project/source file/source string.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/msbuild-task.html","title":"Setup MSBuild Task","content":"\n# Setup MSBuild Task\n\nFSharpLint can be run as an MSBuild task; this will result in lint warnings showing up in your IDE (Visual Studio/Rider).\n\nTo set this up, first [install the FSharpLint dotnet tool](install-dotnet-tool.html).\n\nThen, you can add the following to any of your projects to run linting after build completion for that project:\n\n    <Target Name=\"FSharpLint\" AfterTargets=\"BeforeBuild\">\n     <Exec\n       Command=\"dotnet fsharplint -f msbuild lint --lint-config $(MSBuildThisFileDirectory)/fsharplint.json $(MSBuildProjectFullPath)\"\n       ConsoleToMsBuild=\"true\"\n       IgnoreExitCode=\"false\"\n     />\n    </Target>\n\nIf you would like to enable linting for all projects, you can add the above target to either a `Directory.Build.props` or `Directory.Build.targets` file in the root of your repository. This will add the target to all files. See [here](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019) for more info\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rule-configuration.html","title":"Rule Config","content":"\n# Rule Configuration\n\n## Creating a Configuration File\n\nThe linter by default looks for a file named `fsharplint.json` in the current working directory. Typically you would have this file in the root of your project.\n\nAt this moment in time the configuration requires every rule to be added to your file, rather than a typical approach where you would override just the rules you want to change from their defaults. This will be addressed in a future version see: [Issue #488](https://github.com/fsprojects/FSharpLint/issues/488).\n\nCheck out the [default configuration](https://github.com/fsprojects/FSharpLint/blob/master/src/FSharpLint.Core/fsharplint.json) that the tool comes with to see all possible settings and their default values.\n\n## Global Configuration\n\nIn addition to the configuration available for each rule, there are some settings which are defined globally to maintain consistency across\nmultiple rules. These are defind in the `globals` object in the base of the configuration file. The rule pages below point out any global\nsetting that each rule depends on. The config is as follows, but can be completely omitted to use defaults:\n\n    {\n      \"globals\": {\n        \"numIndentationSpaces\": 4 // number of spaces used for indentation\n      }\n    }\n\n## Ignoring Files\n\nIn the configuration file paths can be used to specify files that should be included, globs are used to match wildcard directories and files. For example the following will match all files with the file name assemblyinfo (the matching is case insensitive) with any extension:\n\n    { \"ignoreFiles\": [\"assemblyinfo.*\"] }\n\n* Directories in the path must be separated using `/`\n* If the path ends with a `/` then everything inside of a matching directory shall be excluded.\n* If the path does not end with a `/` then all matching files are excluded.\n\n\n## <a name=\"ruleList\"></a>Rule List\n\nThe following rules can be specified for linting.\n\n- [TupleCommaSpacing (FL0001)](rules/FL0001.html)\n- [TupleIndentation (FL0002)](rules/FL0002.html)\n- [TupleParentheses (FL0003)](rules/FL0003.html)\n- [PatternMatchClausesOnNewLine (FL0004)](rules/FL0004.html)\n- [PatternMatchOrClausesOnNewLine (FL0005)](rules/FL0005.html)\n- [PatternMatchClauseIndentation (FL0006)](rules/FL0006.html)\n- [PatternMatchExpressionIndentation (FL0007)](rules/FL0007.html)\n- [ModuleDeclSpacing (FL0008)](rules/FL0008.html)\n- [ClassMemberSpacing (FL0009)](rules/FL0009.html)\n- [TypedItemSpacing (FL0010)](rules/FL0010.html)\n- [TypePrefixing (FL0011)](rules/FL0011.html)\n- [UnionDefinitionIndentation (FL0012)](rules/FL0012.html)\n- [RecursiveAsyncFunction (FL0013)](rules/FL0013.html)\n- [RedundantNewKeyword (FL0014)](rules/FL0014.html)\n- [NestedStatements (FL0015)](rules/FL0015.html)\n- [FailwithWithSingleArgument (FL0016)](rules/FL0016.html)\n- [RaiseWithSingleArgument (FL0017)](rules/FL0017.html)\n- [NullArgWithSingleArgument (FL0018)](rules/FL0018.html)\n- [InvalidOpWithSingleArgument (FL0019)](rules/FL0019.html)\n- [InvalidArgWithTwoArguments (FL0020)](rules/FL0020.html)\n- [FailwithfWithArgumentsMatchingFormattingString (FL0021)](rules/FL0021.html)\n- [MaxLinesInLambdaFunction (FL0022)](rules/FL0022.html)\n- [MaxLinesInMatchLambdaFunction (FL0023)](rules/FL0023.html)\n- [MaxLinesInValue (FL0024)](rules/FL0024.html)\n- [MaxLinesInFunction (FL0025)](rules/FL0025.html)\n- [MaxLinesInMember (FL0026)](rules/FL0026.html)\n- [MaxLinesInConstructor (FL0027)](rules/FL0027.html)\n- [MaxLinesInProperty (FL0028)](rules/FL0028.html)\n- [MaxLinesInModule (FL0029)](rules/FL0029.html)\n- [MaxLinesInRecord (FL0030)](rules/FL0030.html)\n- [MaxLinesInEnum (FL0031)](rules/FL0031.html)\n- [MaxLinesInUnion (FL0032)](rules/FL0032.html)\n- [MaxLinesInClass (FL0033)](rules/FL0033.html)\n- [ReimplementsFunction (FL0034)](rules/FL0034.html)\n- [CanBeReplacedWithComposition (FL0035)](rules/FL0035.html)\n- [InterfaceNames (FL0036)](rules/FL0036.html)\n- [ExceptionNames (FL0037)](rules/FL0037.html)\n- [TypeNames (FL0038)](rules/FL0038.html)\n- [RecordFieldNames (FL0039)](rules/FL0039.html)\n- [EnumCasesNames (FL0040)](rules/FL0040.html)\n- [UnionCasesNames (FL0041)](rules/FL0041.html)\n- [ModuleNames (FL0042)](rules/FL0042.html)\n- [LiteralNames (FL0043)](rules/FL0043.html)\n- [NamespaceNames (FL0044)](rules/FL0044.html)\n- [MemberNames (FL0045)](rules/FL0045.html)\n- [ParameterNames (FL0046)](rules/FL0046.html)\n- [MeasureTypeNames (FL0047)](rules/FL0047.html)\n- [ActivePatternNames (FL0048)](rules/FL0048.html)\n- [PublicValuesNames (FL0049)](rules/FL0049.html)\n- [<s>NonPublicValuesNames (FL0050)</s>](rules/FL0050.html) (Removed in `0.20.0`)\n- [MaxNumberOfItemsInTuple (FL0051)](rules/FL0051.html)\n- [MaxNumberOfFunctionParameters (FL0052)](rules/FL0052.html)\n- [MaxNumberOfMembers (FL0053)](rules/FL0053.html)\n- [MaxNumberOfBooleanOperatorsInCondition (FL0054)](rules/FL0054.html)\n- [FavourIgnoreOverLetWild (FL0055)](rules/FL0055.html)\n- [WildcardNamedAsPattern (FL0056)](rules/FL0056.html)\n- [UselessBinding (FL0057)](rules/FL0057.html)\n- [TupleOfWildcards (FL0058)](rules/FL0058.html)\n- [Indentation (FL0059)](rules/FL0059.html)\n- [MaxCharactersOnLine (FL0060)](rules/FL0060.html)\n- [TrailingWhitespaceOnLine (FL0061)](rules/FL0061.html)\n- [MaxLinesInFile (FL0062)](rules/FL0062.html)\n- [TrailingNewLineInFile (FL0063)](rules/FL0063.html)\n- [NoTabCharacters (FL0064)](rules/FL0064.html)\n- [Hints (FL0065)](rules/FL0065.html)\n- [NoPartialFunctions (FL0066)](rules/FL0066.html)\n- [PrivateValuesNames (FL0067)](rules/FL0067.html)\n- [InternalValuesNames (FL0068)](rules/FL0068.html)\n- [GenericTypesNames (FL0069)](rules/FL0069.html)\n- [FavourTypedIgnore (FL0070)](rules/FL0070.html)\n- [CyclomaticComplexity (FL0071)](rules/FL0071.html)\n- [FailwithBadUsage (FL0072)](rules/FL0072.html)\n- [FavourReRaise (FL0073)](rules/FL0073.html)\n- [FavourConsistentThis (FL0074)](rules/FL0074.html)\n- [AvoidTooShortNames (FL0075)](rules/FL0075.html)\n- [FavourStaticEmptyFields (FL0076)](rules/FL0076.html)\n- [AvoidSinglePipeOperator (FL0077)](rules/FL0077.html)\n- [AsyncExceptionWithoutReturn (FL0078)](rules/FL0078.html)\n- [SuggestUseAutoProperty (FL0079)](rules/FL0079.html)\n- [UnnestedFunctionNames (FL0080)](rules/FL0080.html)\n- [NestedFunctionNames (FL0081)](rules/FL0081.html)\n- [UsedUnderscorePrefixedElements (FL0082)](rules/FL0082.html)\n- [UnneededRecKeyword (FL0083)](rules/FL0083.html)\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/install-dotnet-tool.html","title":"Install Dotnet Tool","content":"\n# Installing as dotnet tool\n\nThe linter can be [installed as a dotnet tool](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-tool-install).\n\nInstall as a global tool: `dotnet tool install -g dotnet-fsharplint`.\n\nInstall as tool to specific directory: `dotnet tool install --tool-path <my_directory> dotnet-fsharplint`\n\n## Running the Console Application\n\nThe console application is a wrapper around the linter. For basic usage, just run `dotnet fsharplint lint <input>`, where `input` can be an fsproj, sln, fs, fsx file, or a string of source code.\n\nRun `dotnet fsharplint --help` for full usage information.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rule-suppression.html","title":"Rule Suppression","content":"\n# Rule Suppression\n\nThe linter's rules can be suppressed using structured comments.\n\nThe following comments are available for use:\n\n- `// fsharplint:disable` disables rules for all lines following the comment.\n- `// fsharplint:enable` re-enables all disabled rules.\n- `// fsharplint:disable-next-line` disables rules for the next line.\n- `// fsharplint:disable-line` disables rules for the current line.\n\nOnly one structured comment can be specified per line; any additional ones will be ignored.\n\n## Disabling Specific Rules\n\nThe disable comments allow for specific rules to be disabled by specifying the rules whitespace separated at the end of the comment, for example:\n\n- `// fsharplint:disable TypePrefixing Hints` disables the rules `TypePrefixing` and `Hints`.\n- `// fsharplint:disable-next-line TypePrefixing` disables the rule `TypePrefixing`.\n\nIf no rules a specified then all rules are disabled, for example:\n\n- `// fsharplint:disable` disables all rules.\n\n## Examples\n\n### Disable Entire File\n\n```fsharp\n// fsharplint:disable\n```\n\nPrecede the file with the comment above.\n\n### Disable Section of the File\n\n```fsharp\n// fsharplint:disable RecordFieldNames\ntype MyType =\n    { xyz: string\n      foo: string }\n// fsharplint:enable\n```\n\nDisables the `RecordFieldNames` rule between the disable and enable comments.\n\n```fsharp\n// fsharplint:disable\ntype sometype =\n    { xyz: string\n      foo: string }\n// fsharplint:enable\n```\n\nDisables all rules between the disable and enable comments.\n\n### Disable Next Line\n\n```fsharp\n// fsharplint:disable-next-line Hints\nlet x = not true\n```\n\nDisables the `Hints` rule for the next line.\n\n```fsharp\n// fsharplint:disable-next-line\nlet x = not true\n```\n\nDisables all rules for the next line.\n\n### Disable Current Line\n\n```fsharp\nlet x = not true // fsharplint:disable-line Hints\n```\n\nDisables the `Hints` rule for the current line.\n\n```fsharp\nlet x = not true // fsharplint:disable-line\n```\n\nDisables all rules for the current line.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0043.html","title":"FL0043","content":"\n# LiteralNames (FL0043)\n\n## Cause\n\nLiteral naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the literal's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"literalNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0011.html","title":"FL0011","content":"\n# TypePrefixing (FL0011)\n\n## Cause\n\nIncorrect formatting for higher order type.\n\n## Rationale\n\nRecommended by [Microsoft F# code formatting guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#formatting-discriminated-union-declarations).\n\n## How To Fix\n\nUpdate higher order type to have correct formatting as per guide linked above.\n\n## Rule Settings\n\n    {\n        \"typePrefixing\": {\n            \"enabled\": false,\n            \"config\": {\n                \"mode\": \"Hybrid\"\n            }\n        }\n    }\n\n* *mode* - how to enforce the rule (\"Hybrid\" or \"Always\" or \"Never\")\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0031.html","title":"FL0031","content":"\n# MaxLinesInEnum (FL0031)\n\n## Cause\n\nAn enum is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a enum becomes the more complex it becomes, it also indicates that all the items may not be related.\n\n## How To Fix\n\nExtract code out into smaller enums.\n\n## Rule Settings\n\n    {\n        \"maxLinesInEnum\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 500\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0074.html","title":"FL0074","content":"\n# FavourConsistentThis (FL0074)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nDifferent symbol was used for the instance identifier (e.g. using `this`, and also `self`).\n\n## Rationale\n\nUsing the same symbol for the instance identifier (e.g. `this` everywhere, or `self` everywhere) aids readability.\n\n## How To Fix\n\nReplace all occurrences of the instance symbol used with the one configured in the rule settings (e.g. if using both `self` and `this` in the same codebase, decide which one to keep, and then only use one of them, not both).\n\n## Rule Settings\n\n    {\n        \"favourConsistentThis\": {\n            \"enabled\": false,\n            \"config\": {\n                \"symbol\": \"this\"\n            }\n        }\n    }\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0018.html","title":"FL0018","content":"\n# NullArgWithSingleArgument (FL0018)\n\n## Cause\n\n`nullArg` is passed more than one argument e.g. `nullArg \"Divisor cannot be zero.\" 5`\n\n## Rationale\n\n`nullArg` being passed more than one argument (the error message) is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"nullArgWithSingleArgument\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0012.html","title":"FL0012","content":"\n# UnionDefinitionIndentation (FL0012)\n\n## Cause\n\nIncorrect indentation for union definition.\n\n## Rationale\n\nRecommended by [Microsoft F# code formatting guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#use-prefix-syntax-for-generics-foot-in-preference-to-postfix-syntax-t-foo).\n\n## How To Fix\n\nUpdate union definition to have correct formatting as specified in linked guide (indent `|` by 4 spaces).\n\n## Rule Settings\n\nUses the `numIndentationSpaces` global setting.\n\n    {\n        \"unionDefinitionIndentation\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0034.html","title":"FL0034","content":"\n# ReimplementsFunction (FL0034)\n\n## Cause\n\nA lambda function does nothing other than call an existing function, two examples below:\n\n`fun x y -> x + y`\n`fun x y -> foo x y`\n\n## Rationale\n\nThe lambda functions are redundant.\n\n## How To Fix\n\nReplace the lambda with the function that is being called.\n\n`fun x y -> x + y` is the same as `(+)`\n`fun x y -> foo x y` is the same as `foo`\n\n## Rule Settings\n\n    {\n        \"reimplementsFunction\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0023.html","title":"FL0023","content":"\n# MaxLinesInMatchLambdaFunction (FL0023)\n\n## Cause\n\nA match function is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a function becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nUse active patterns to help reduce the number of matches/extract code out into composable functions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInMatchLambdaFunction\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 100\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0056.html","title":"FL0056","content":"\n# WildcardNamedWithAsPattern (FL0056)\n\n## Cause\n\nA wildcard is given a name using the as pattern e.g. `match something with | _ as x -> x + y`\n\n## Rationale\n\nThe wildcard and as pattern can be replaced with the identifier the value is to be bound to.\n\n## How To Fix\n\nReplace the wildcard with the identifier the wildcard is currently being bound to, e.g. change `match something with | _ as x -> x + y` to `match something with | x -> x + y`\n\n## Rule Settings\n\n    {\n        \"wildcardNamedWithAsPattern\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0070.html","title":"FL0070","content":"\n# FavourTypedIgnore (FL0070)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nUse of `ignore` function is untyped.\n\n## Rationale\n\nSpecifying a type prevents mistakes and aides maintainability.\n\n## How To Fix\n\nAdd the type of the element being ignored as a type parameter to the `ignore`\ninvokation, e.g. `ignore<string>`.\n\n## Rule Settings\n\n    {\n        \"favourTypedIgnore\": {\n           \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0035.html","title":"FL0035","content":"\n# CanBeReplacedWithComposition (FL0035)\n\n## Cause\n\nA lambda function applies a single argument to a chain of function calls, two examples below:\n\n`fun x -> not(isValid(x))`\n`fun x -> x |> isValid |> not`\n\n## Rationale\n\nThe lambda functions are redundant.\n\n## How To Fix\n\nReplace the lambda with function composition:\n\n`fun x -> not(isValid(x))` and `fun x -> x |> isValid |> not` are the same as `isValid >> not`\n\n## Rule Settings\n\n    {\n        \"canBeReplacedWithComposition\": {\n            \"enabled\": true\n        }\n    }\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0080.html","title":"FL0080","content":"\n# UnnestedFunctionNames (FL0080)\n\n*Introduced in `0.21.8`*\n\n## Cause\n\nUnnested function naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the unnested function names to be consistent with the rules you have specified.\n\n## Rule Settings\n\n    {\n        \"UnnestedFunctionNames\": {\n            \"enabled\": false,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0041.html","title":"FL0041","content":"\n# UnionCasesNames (FL0041)\n\n## Cause\n\nUnion case naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the union case's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"unionCasesNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0075.html","title":"FL0075","content":"\n# AvoidTooShortNames (FL0075)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nName used for element (symbol, variable, member, parameter) is too short.\n\n## Rationale\n\nNames represent information. Names that are too short give poor information about what they represent.\n\n## How To Fix\n\nUse longer names for the flagged occurrences.\n\n## Rule Settings\n\n    {\n        \"avoidTooShortNames\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0083.html","title":"FL0083","content":"\n# UnneededRecKeyword (FL0083)\n\n*Introduced in `0.23.8`*\n\n## Cause\n\nRecursive function (function marked with a \"rec\" keyword) does not invoke itself.\n\n## Rationale\n\nUsing \"rec\" keyword on a function that is not recursive is unnecessary.\n\n## How To Fix\n\nUpdate the function to invoke itself or remove \"rec\" keyword in case it doesn't need to invoke itself recursively.\n\n## Rule Settings\n\n    {\n        \"unneededRecKeyword\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0022.html","title":"FL0022","content":"\n# MaxLinesInLambdaFunction (FL0022)\n\n## Cause\n\nA lambda function is made up of more than a configurable number of lines.\n\n## Rationale\n\nLambda functions are usually used for single lines of code that aren't worth naming to make code more concise. A large lambda function indicates it should probably be a named function.\n\n## How To Fix\n\nConsider using a named function rather than a lambda function.\n\n## Rule Settings\n\n    {\n        \"maxLinesInLambdaFunction\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 7\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0037.html","title":"FL0037","content":"\n# ExceptionNames (FL0037)\n\n## Cause\n\nException naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the exception's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"exceptionNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\",\n                \"suffix\": \"Exception\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0015.html","title":"FL0015","content":"\n# NestedStatements (FL0015)\n\nSingle rule that checks code is not more deeply nested than a configurable depth.\n\n## Cause\n\nA statement is nested deeper than a configurable depth, for example if `depth` was set to 8 (the default) then the following code would cause an error:\n\n    let dog =\n\t\tif true then \t\t\t\t\t\t\t\t\t// Depth 1\n\t\t\tif true then\t\t\t\t\t\t\t\t// Depth 2\n\t\t\t\tif true then\t\t\t\t\t\t\t// Depth 3\n\t\t\t\t\tif true then\t\t\t\t\t\t// Depth 4\n\t\t\t\t\t\tif true then\t\t\t\t\t// Depth 5\n\t\t\t\t\t\t\tif true then\t\t\t\t// Depth 6\n\t\t\t\t\t\t\t\tif true then\t\t\t// Depth 7\n\t\t\t\t\t\t\t\t\tif true then\t\t// Depth 8\n\t\t\t\t\t\t\t\t\t\t()\t\t// Depth 9!!\n\n## Rationale\n\nWhen code becomes too deeply nested it becomes more difficult to read and understand, try to refactor nested code out into functions.\n\n## How To Fix\n\nReduce the depth of the deepest statement, e.g. to fix the example in the \"Cause\" section you'd take out on level of depth:\n\n    let dog =\n\t\tif true then \t\t\t\t\t\t\t\t\t// Depth 1\n\t\t\tif true then\t\t\t\t\t\t\t\t// Depth 2\n\t\t\t\tif true then\t\t\t\t\t\t\t// Depth 3\n\t\t\t\t\tif true then\t\t\t\t\t\t// Depth 4\n\t\t\t\t\t\tif true then\t\t\t\t\t// Depth 5\n\t\t\t\t\t\t\tif true then\t\t\t\t// Depth 6\n\t\t\t\t\t\t\t\tif true then\t\t\t// Depth 7\n\t\t\t\t\t\t\t\t\t()\t\t\t// Depth 8\n\n## Rule Settings\n\n    {\n        \"nestedStatements\": {\n            \"enabled\": false,\n            \"config\": {\n                \"depth\": 8\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0064.html","title":"FL0064","content":"\n# NoTabCharacters (FL0064)\n\n## Cause\n\nA tab character was found in a file.\n\n## Rationale\n\nIt's best practice to use spaces to indent code rather than tabs, this is because tabs have different widths on different platforms.\n\n## How To Fix\n\nReplace the tab with spaces.\n\n## Rule Settings\n\n    {\n        \"noTabCharacters\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0025.html","title":"FL0025","content":"\n# MaxLinesInFunction (FL0025)\n\n## Cause\n\nA function is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a function becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nRefactor to extract out code into smaller composable functions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInFunction\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 100\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0073.html","title":"FL0073","content":"\n# FavourReRaise (FL0073)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nAn exception was re-thrown (re-raised) without the use of function `reraise()`.\n\n## Rationale\n\nUsing `raise ex` (inside a `try..with|ex` block) to re-raise an exception is not ideal, as it loses valuable stacktrace information from the original exception.\n\n## How To Fix\n\nUse `reraise()` instead of `raise ex`.\n\n## Rule Settings\n\n    {\n        \"favourReRaise\": {\n           \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0058.html","title":"FL0058","content":"\n# TupleOfWildcards (FL0058)\n\n## Cause\n\nA constructor in a pattern has arguments that consist entirely of wildcards e.g. `SynPat.Paren(_, _)`\n\n## Rationale\n\nThe tuple of wildcards can be replaced with a single wildcard.\n\n## How To Fix\n\nReplace the tuple with a single wildcard e.g. the example in the cause could be turned into `SynPat.Paren(_)`\n\n## Rule Settings\n\n    {\n        \"tupleOfWildcards\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0004.html","title":"FL0004","content":"\n# PatternMatchClausesOnNewLine (FL0004)\n\n## Cause\n\nAll pattern match clauses should be on their own line.\n\n## Rationale\n\nReadability.\n\n## How To Fix\n\nPlace each pattern match clause on its own line.\n\n## Rule Settings\n\n    {\n        \"patternMatchClausesOnNewLine\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0078.html","title":"FL0078","content":"\n# AsyncExceptionWithoutReturn (FL0078)\n\n*Introduced in `0.21.6`*\n\n## Cause\n\nMissing \"return\" keyword inside async blocks when throwing exceptions.\n\n## Rationale\n\nWhen returning values or throwing exception in async blocks, the \"return\" keyword must be used.\n\n## How To Fix\n\nAdd \"return\" keyword to your raise/failwith/failwithf statment.\n\n## Rule Settings\n\n    {\n        \"asyncExceptionWithoutReturn\": { \"enabled\": false }\n    }"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0066.html","title":"FL0066","content":"\n# NoPartialFunctions (FL0066)\n\n## Cause\n\nA partial function was used.\n\n## Rationale\n\nPartial functions are only valid for certain inputs; for invalid inputs they will throw an exception. In most cases,\nit is better to use a non-partial version of the function (e.g. `List.tryFind` instead of `List.find`) or use pattern matching,\nso that you need to explicitly handle those cases which would cause an exception in the partial version.\n\n## How To Fix\n\nUse non-partial function or pattern matching.\n\n## Rule Settings\n\n    {\n        \"noPartialFunctions\": {\n            \"enabled\": false,\n            \"config\": {\n              \"allowedPartials\": [],\n              \"additionalPartials\": []\n            }\n        }\n    }\n\n* *allowedPartials* - list of strings representing partial functions to allow (e.g. `\"List.tryFind\"`)\n* *additionalPartials* - list of strings representing additional partial functions to disallow\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0068.html","title":"FL0068","content":"\n# InternalValuesNames (FL0068)\n\n*Introduced in `0.20.0`*\n\n## Cause\n\nValue with internal visibility's naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the internal value's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"internalValuesNames\": {\n           \"enabled\": true,\n            \"config\": {\n                \"naming\": \"CamelCase\",\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0020.html","title":"FL0020","content":"\n# InvalidArgWithTwoArguments (FL0020)\n\n## Cause\n\n`invalidArg` is passed more than two arguments e.g. `invalidArg \"month\" \"Expected value between 1 and 12\"`\n\n## Rationale\n\n`invalidArg` being passed more than two arguments is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"invalidArgWithTwoArguments\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0007.html","title":"FL0007","content":"\n# PatternMatchExpressionIndentation (FL0007)\n\n## Cause\n\nAll pattern match expressions (to the right of -> after clause) should be at the same indentation level.\n\n## Rationale\n\nReadability.\n\n## How To Fix\n\nUpdate pattern match expressions to have consistent indentation.\n\n## Rule Settings\n\nUses the `numIndentationSpaces` global setting.\n\n    {\n        \"patternMatchExpressionIndentation\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0045.html","title":"FL0045","content":"\n# MemberNames (FL0045)\n\n## Cause\n\nMember naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the member's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"memberNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0067.html","title":"FL0067","content":"\n# PrivateValuesNames (FL0067)\n\n*Introduced in `0.20.0`*\n\n## Cause\n\nValue with private visibility's naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the private value's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"privateValuesNames\": {\n           \"enabled\": true,\n            \"config\": {\n                \"naming\": \"CamelCase\",\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0051.html","title":"FL0051","content":"\n# MaxNumberOfItemsInTuple (FL0051)\n\n## Cause\n\nA tuple contains more than a configurable number of items, for example if `maxItems` was set to 4 (the default value)\nthen the following statement would cause the error: `let tup = (1, 2, 3, 5, 6)`\n\n## Rationale\n\nTuple's items are not named, the more items there are the harder it is to work out what each is for.\n\n## How To Fix\n\nReduce the number of items in the tuple, ideally replace the tuple with a record.\n\n## Rule Settings\n\n    {\n        \"maxNumberOfItemsInTuple\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxItems\": 4\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0057.html","title":"FL0057","content":"\n# UselessBinding (FL0057)\n\n## Cause\n\nAn identifier is binded to itself e.g. `let x = x`\n\n## Rationale\n\nPointless statement likely to be an error.\n\n## How To Fix\n\nRemove the binding.\n\n## Rule Settings\n\n    {\n        \"uselessBinding\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0048.html","title":"FL0048","content":"\n# ActivePatternNames (FL0048)\n\n## Cause\n\nActive pattern naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the active pattern's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"activePatternNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0029.html","title":"FL0029","content":"\n# MaxLinesInModule (FL0029)\n\n## Cause\n\nA module is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a module becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nExtract code out into smaller modules.\n\n## Rule Settings\n\n    {\n        \"maxLinesInModule\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 1000\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0042.html","title":"FL0042","content":"\n# ModuleNames (FL0036)\n\nSet of rules that analyse the naming of user defined elements within a program.\n\n## Cause\n\nModule naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the module's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"moduleNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0050.html","title":"FL0050","content":"\n# <s>NonPublicValuesNames (FL0050)</s> (Removed)\n\n**Removed in version `0.20.0`. Replaced by [FL0067](FL0067.html) and [FL0068](FL0068.html).**\n\n## Cause\n\nNon-public value naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the non-public value's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"nonPublicValuesNames\": {\n           \"enabled\": true,\n            \"config\": {\n                \"naming\": \"CamelCase\",\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0059.html","title":"FL0059","content":"\n# Indentation (FL0059)\n\n## Cause\n\nInconsistent indentation in file.\n\n## Rationale\n\nReadability.\n\n## How To Fix\n\nUpdate file to use consistent amount of spaces for indentation.\n\n## Rule Settings\n\nUses the `numIndentationSpaces` global setting.\n\n    {\n        \"indentation\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0039.html","title":"FL0039","content":"\n# RecordFieldNames (FL0039)\n\n## Cause\n\nRecord field naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the record field's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"recordFieldNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0061.html","title":"FL0061","content":"\n# TrailingWhitespaceOnLine (FL0061)\n\n## Cause\n\nWhitespace was found at the end of a line.\n\n## Rationale\n\nPointless whitespace.\n\n## How To Fix\n\nRemove any whitespace from the end of the line.\n\n## Rule Settings\n\n    {\n        \"trailingWhitespaceOnLine\": {\n            \"enabled\": false,\n            \"config\": {\n                \"numberOfSpacesAllowed\": 1,\n                \"oneSpaceAllowedAfterOperator\": true,\n                \"ignoreBlankLines\": true\n            }\n        }\n    }\n\n* *numberOfSpacesAllowed* - An integer property that specifies how many space characters are allowed on the end of a line. (Default 1)\n* *oneSpaceAllowedAfterOperator* - A boolean property that will allow a single space on the end of the line if it's preceded by an operator/symbol character. (Default true)\n* *ignoreBlankLines* - A boolean property that will ignore any lines that are made up of just whitespace. (Default true)\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0010.html","title":"FL0010","content":"\n# TypedItemSpacing (FL0010)\n\n## Cause\n\nChecks spacing around a typed item, e.g. `(number:int)`.\n\n## Rationale\n\nConsistency and readability.\n\n## How To Fix\n\nUpdate typed item to use configured spacing.\n\n## Rule Settings\n\n    {\n        \"typedItemSpacing\": {\n            \"enabled\": false,\n            \"config\": {\n                \"typedItemStyle\": \"NoSpaces\"\n            }\n        }\n    }\n\n* *typedItemStyle* - style of spacing: \"NoSpaces\", \"SpaceAfter\", \"SpacesAround\"\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0055.html","title":"FL0055","content":"\n# FavourIgnoreOverLetWild (FL0055)\n\n## Cause\n\nA value is binded to a wildcard e.g. `let _ = Console.ReadLine()`\n\n## Rationale\n\nUsing the ignore function makes it clear what is intended to happen, rather than something that may be a mistake.\n\n## How To Fix\n\nPipe the value into the ignore function e.g. `Console.ReadLine() |> ignore`\n\n## Rule Settings\n\n    {\n        \"favourIgnoreOverLetWild\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0072.html","title":"FL0072","content":"\n# FailwithBadUsage (FL0072)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nUsing failwith in improper places or with dubious parameters.\n\n## Rationale\n\nPassing empty strings or duplicate messages to failwith statements makes it much harder to understand/locate & subsequently fix bugs. \nIt's also true when exceptions are swallowed in try...with blocks.\n\n## How To Fix\n\nDo not pass an empty string or a duplicate message to failwith. In case of swallowing exception messages in try...with blocks, pass\nthe exception as an innerException parameter of a new Exception: `raise <| Exception(\"Error message\", ex)`.\n\n## Rule Settings\n\n    {\n        \"failwithBadUsage\": {\n           \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0021.html","title":"FL0021","content":"\n# FailwithfWithArgumentsMatchingFormatString (FL0021)\n\n## Cause\n\n`failwithf` is passed more arguments than the format string (first argument) species e.g. `failwithf \"%d\" 5 5`\n\n## Rationale\n\n`failwithf` being passed more arguments than the format string (first argument) specifies is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"failwithfWithArgumentsMatchingFormatString\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0019.html","title":"FL0019","content":"\n# InvalidOpWithSingleArgument (FL0019)\n\n## Cause\n\n`invalidOp` is passed more than one argument e.g. `invalidOp \"Divisor cannot be zero.\" 5`\n\n## Rationale\n\n`invalidOp` being passed more than one argument (the error message) is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"invalidOpWithSingleArgument\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0024.html","title":"FL0024","content":"\n# MaxLinesInValue (FL0024)\n\n## Cause\n\nA statement binded to a value is made up of more than a configurable number of lines.\nFor example the following would break the rule when the maximum number of lines is set to 4:\n\n    let value =\n\t\tlet x = 7\n\t\tlet y = 6\n\t\tlet e = 5\n\t\tlet r = 4\n\t\tr * y * e * x\n\n## Rationale\n\nThe larger a value becomes the more complex it becomes.\n\n## How To Fix\n\nRefactor to extract out code into smaller composable functions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInValue\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 100\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0027.html","title":"FL0027","content":"\n# MaxLinesInConstructor (FL0027)\n\n## Cause\n\nA class constructor is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a constructor becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nExtract code out into private methods or functions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInConstructor\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 100\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0052.html","title":"FL0052","content":"\n# MaxNumberOfFunctionParameters (FL0052)\n\n## Cause\n\nA function contains more than a configurable number of parameters, for example if `maxItems` was set to 5 (the default value)\nthen the following condition would cause the error: `let findCat one two three four five six = 0`\n\n## Rationale\n\nToo many parameters make the function difficult to use.\n\n## How To Fix\n\nReduce the number of function parameters, e.g. to fix the example in the \"Cause\": `let findCat one two three four five = 0`. A good way to reduce the number of parameters is to group them using records.\n\n## Rule Settings\n\n    {\n        \"maxNumberOfFunctionParameters\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxItems\": 5\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0030.html","title":"FL0030","content":"\n# MaxLinesInRecord (FL0030)\n\n## Cause\n\nA record is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a record becomes the more complex it becomes, it also indicates that all the items may not be related.\n\n## How To Fix\n\nExtract code out into smaller composed records.\n\n## Rule Settings\n\n    {\n        \"maxLinesInRecord\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 500\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0014.html","title":"FL0014","content":"\n# RedundantNewKeyword (FL0014)\n\n## Cause\n\nUsing `new` to instantiate a type which does not implement `IDisposable`.\n\n## Rationale\n\n`new` is redundant for instantiating types which do not implement `IDisposable`.\n\n## How To Fix\n\nRemove `new` keyword.\n\n## Rule Settings\n\n    {\n        \"redundantNewKeyword\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0009.html","title":"FL0009","content":"\n# ClassMemberSpacing (FL0009)\n\n## Cause\n\nUnexpected number of spaces between declarations within module (2 spaces are expected).\n\n## Rationale\n\nRecommended by [Microsoft F# code formatting guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#formatting-blank-lines).\n\n## How To Fix\n\nUse 2 space between class members.\n\n## Rule Settings\n\n    {\n        \"classMemberSpacing\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0013.html","title":"FL0013","content":"\n# RecursiveAsyncFunction (FL0013)\n\n## Cause\n\nRecursive async function ending in `do!` instead of `return!` is unsafe.\n\n## Rationale\n\nIf you end your recursive function with `do!` instead of `return!`, the compiler\ncannot perform tail-call optimization.\n\n## How To Fix\n\nUse `return!` instead of `do!`\n\n## Rule Settings\n\n    {\n        \"recursiveAsyncFunction\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0053.html","title":"FL0053","content":"\n# MaxNumberOfMembers (FL0053)\n\n## Cause\n\nA class contains more than a configurable number of members (`maxItems`).\n\n## Rationale\n\nThe class is likely to be doing too much and violating the single responsibility principle.\n\n## How To Fix\n\nReduce the number of members in the class, e.g. extract them out to another class.\n\n## Rule Settings\n\n    {\n        \"maxNumberOfMembers\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxItems\": 32\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0032.html","title":"FL0032","content":"\n# MaxLinesInUnion (FL0032)\n\n## Cause\n\nA discriminated union is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a discriminated union becomes the more complex it becomes, it also indicates that all the items may not be related.\n\n## How To Fix\n\nExtract code out into smaller composed discriminated unions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInUnion\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 500\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0026.html","title":"FL0026","content":"\n# MaxLinesInMember (FL0026)\n\n## Cause\n\nA member is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a member becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nExtract code out into private methods or functions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInMember\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 100\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0060.html","title":"FL0060","content":"\n# MaxCharactersOnLine (FL0060)\n\n## Cause\n\nMore than a configurable number of characters were on a single line.\n\n## Rationale\n\nToo many characters on a single line make code harder to read by forcing the reader to scroll horizontally.\n\n## How To Fix\n\nBreak the line up into multiple lines.\n\n## Rule Settings\n\n    {\n        \"maxCharactersOnLine\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxCharactersOnLine\": 120\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0065.html","title":"FL0065","content":"\n# Hints (FL0065)\n\n## Introduction\n\nThe Hints analyser is inspired by [HLint](https://github.com/ndmitchell/hlint). The hints let users easily write their own rules which are matched against linted code and when matched produce a suggestion that the user provides as part of the hint.\n\nEvery hint is formed of two parts: the match and the suggestion. Both the match and the suggestion are parsed the same way into ASTs, but they have two different purposes; the match AST is analysed against the code being linted looking for any expressions in the code that match the AST, and if there is a match then the suggestion AST is used to display a suggestion on how the code can be refactored.\n\n## Matching\n\n### Match Any Expression\n\nAny F# expression can be matched by a variable or wildcard.\n\n* A variable is represented by a single letter e.g. `x`\n* A wildcard is represented by the character `_`\n\nVariables and wildcards are seemingly the same, and in terms of matching they are. The key difference is that using a variable lets you refer to it in the suggestion, enabling you to show where the matched expression should be moved within the matched code.\n\nFor example if we wanted to match the following:\n\n    not ((4 + 4) >= (x + 77 * (9 * y)))\n\nand suggest the following (which is equivalent):\n\n    (4 + 4) < (x + 77 * (9 * y))\n\nWe can use variables here, the expression `(4 + 4)` can be matched by a variable and `(x + 77 * (9 * y))` by another, this is shown below using the variables `a` and `b`.\n\n    not (a >= b) ===> a <  b\n\n### Match An Identifier\n\nIdentifiers in F# code can be matched by using the same identifier in the hint. It's important to note that since single characters are used to represent variables in hints the identifier must be at least 2 characters long.\n\nFor example the following rule uses identifiers:\n\n    [lang=hint]\n    List.fold (+) 0 ===> List.sum\n\n`List.fold` in the hint will match the same identifier in the code. So if `List.fold` is found anywhere in the F# code being analysed with `(+)` and `0` applied to it then the rule will be matched.\n\n### Match Literal Constants\n\nLiteral constants can be used to match literal constants in the code, the constants in hints are the same format as constants in F#, so for example if you wanted to match `0x4b` you could use `0x4b` in the hint.\n\nExample:\n\n    [lang=hint]\n    not true ===> false\n\nIn the example above the boolean literal `true` is used to match any F# code where `true` is applied to the `not` identifier.\n\n### Match Function Application and Operators\n\nMatching function application, prefix operators, and infix operators in hints are all done in the same way as how you'd write it in F# e.g.\n\n    [lang=hint]\n    not true ===> false\n    4 + 4 ===> 8\n    ~x ===> someFunc x\n\nThe first rule above matches `true` (boolean literal) applied to the function `not`, the second matches two literal integers (both `4`) applied to the `+` binary operator, and the third matches an expression applied to the `~` prefix operator.\n\nRead the below section titled \"Order Of Operations\" for specifying the order of application in a hint.\n\n### Match Lambda Functions\n\nLambda functions can be matched using the syntax `fun args -> ()` e.g. `fun x y -> x + y`.\n\nThe arguments may be either wildcards (`_`) or 'variables' (a single character). The 'variable' arguments have a particular use: they match a lambda that has that argument as an identifier, and then if that 'variable' is used in the body of the lambda in the hint then it will match the argument's identifier in the body of the code.\n\nFor example:\n\n    [lang=hint]\n    fun x -> x ===> id\n\nThe above hint will match a lambda that has a single argument which is an identifier and returns that identifier. `fun val -> val` would be matched, whereas `fun val -> ()` would not be matched - to match this you could use the hint: `fun _ -> ()`.\n\n### Order Of Operations\n\nGeneric order of operations can be specified using parentheses. They're described as 'generic' because using parentheses in a hint will also take into account the following operators: `|>`, `||>`, `|||>`, `<|`, `<||`, and `<|||` which are often used to specificy the order of function application.\n\nBelow uses parentheses to match `x` applied to `not` and the result of that application applied to `someFunc`.\n\n    [lang=hint]\n    someFunc (not x) ===> someOtherFunc x\n\nIn F# several operators are commonly used to show the order of function application, for example in F# `someFunc (not x)` could also be written as:\n\n    not x |> someFunc\n\nThe same code written as a rule `not x |> someFunc` will match the above, but it is matching against the operator so it will not match `someFunc (not x)`. However the rule `someFunc (not x)` will match both.\n\n## EBNF of a Hint\n\nThis is incomplete - currently missing a few of the more detailed rules e.g. `uint32` and `infix-operator`, for these I'd recommend looking them up in the EBNF for F# as that's what they will be based upon.\n\n    [lang=ebnf]\n    whitespace = \" \" | \"\\t\" | \"\\n\" | \"\\r\\n\" | \"\\r\";\n\n    spaces = [{whitespace}];\n\n    spaces1 = whitespace, [{whitespace}];\n\n    bool = \"true\" | \"false\";\n\n    unit = \"(\", [spaces], \")\";\n\n    constant = bool\n                | unit\n                | character\n                | literal-string\n                | verbatim-string\n                | byte-char\n                | byte-array\n                | verbatim-byte-array\n                | triple-quoted-string\n                | sbyte\n                | byte\n                | int16\n                | uint16\n                | uint32\n                | native-int\n                | unative-int\n                | int64\n                | uint64\n                | single\n                | big-num\n                | decimal\n                | double\n                | int32;\n\n    parentheses = \"(\" expression \")\";\n\n    wildcard = \"_\";\n\n    variable = letter, -letter;\n\n    ident-start-char = \"_\" | letter;\n\n    ident-char = letter | digit | \"'\" | \"_\" ;\n\n    ident-text = ident-start-char, {ident-char};\n\n    ident = ident-text | (\"``\", {(-(\"`\" | \"\\n\" | \"\\r\" | \"\\t\")) | ((\"`\"), -(\"`\" | \"\\n\" | \"\\r\" | \"\\t\"))}, \"``\");\n\n    ident-or-op = ident | (\"(\", spaces, operator, spaces, \")\");\n\n    long-ident = {ident, \".\"} | ident;\n\n    long-ident-or-op = ident, {\".\", ident}, [\".\", ident-or-op]\n                        | ident-or-op\n                        | long-ident;\n\n    application = constant\n                    | variable\n                    | wildcard\n                    | long-ident-or-op\n                    | parentheses;\n\n    function-application = long-ident-or-op, identifier, spaces, {application, spaces}, [application, spaces];\n\n    prefix-expr = prefix-operator, spaces, expression\n\n    infix-expr = expression, spaces, infix-operator, spaces, expression\n\n    identifier = long-ident-or-op -letter;\n\n    argument-variable = letter;\n\n    argument-wildcard = \"_\";\n\n    lambda-arguments = [{(argument-variable | argument-wildcard), spaces1}],\n                            (argument-variable | argument-wildcard), [spaces]\n\n    lambda = \"fun\", spaces1, lambda-arguments, \"->\", spaces, expression;\n\n    expression = spaces, (constant | lambda | variable | wildcard | function-application\n                          | identifier | parentheses | infix-expr | prefix-expr), spaces;\n\n    suggestion = expression;\n\n    match = expression;\n\n    hint = match, spaces, \"===>\", spaces, suggestion;\n\n## Writing Your Own Hints\n\nYou can add new hints to your config in the `hints` object. This config has two fields, `add` and `ignore`. `add` is used to add new hints, while `ignore` can be used to ignore hints\nadded in previous configs (e.g. the default config).\n\nFor example to make the lint tool run with just the two hints: `not (a =  b) ===> a <> b` and `not (a <> b) ===> a =  b`, and also ignore the default hint `x = true ===> x`,\nyou could use the following config file.\n\n    [lang=javascript]\n    {\n      \"hints\": {\n        \"add\": [\n          \"not (a =  b) ===> a <> b\",\n          \"not (a <> b) ===> a =  b\"\n        ],\n        \"ignore\": [ \"x = true ===> x\" ]\n      }\n    }\n\n## Flaws\n\n* `===>` is used to split the hints into parts, a hint cannot match this valid F# operator.\n* Single letter identifiers are used as variables inside a hint, so attempting to match an identifier that is a single letter is not going to work.\n* Operators beginning with `.` (e.g. `.*`) will have incorrect precedence and as such should not currently be used in hints.\n\n## Future Intentions\n\n* Provide more informative parse errors.\n* Allow for adding your own hints and removing select hints rather than always having to override the default with a set of hints.\n* Provide support for matching literal lists, literal arrays, literal sequences, tuples, methods, if statements, and match statements.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0047.html","title":"FL0047","content":"\n# MeasureTypeNames (FL0047)\n\n## Cause\n\nMeasure type naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the measure type's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"measureTypeNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0005.html","title":"FL0005","content":"\n# PatternMatchOrClausesOnNewLine (FL0005)\n\n## Cause\n\nAll pattern match \"or\" clauses should be on their own line.\n\n## Rationale\n\nReadability.\n\n## How To Fix\n\nPlace each pattern match \"or\" clause on its own line.\n\n## Rule Settings\n\n    {\n        \"patternMatchOrClausesOnNewLine\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0077.html","title":"FL0077","content":"\n# AvoidSinglePipeOperator (FL0077)\n\n*Introduced in `0.21.5`*\n\n## Cause\n\nUse of the pipe operator when only one invocation is employed.\n\n## Rationale\n\nWhen the use of the pipe operator happens for a single invocation (instead of a multiple one, which would add a chain of them, usually staggered across \nmany lines), it doesn't aid readibility.\n\nExample of single pipe operator usage:\n\n```fsharp\nlet someFunc someParam =\n    someParam\n    |> someOtherFunc\n```\n\nExample of multiple pipe operator usage:\n\n```fsharp\nlet someFunc someParam =\n    someParam\n    |> someOtherFunc\n    |> yetAnotherFunc\n```\n\n## How To Fix\n\nJust use a normal function call, without the need for any operator:\n\n```fsharp\nlet someFunc someParam =\n    someOtherFunc someParam\n```\n\n## Rule Settings\n\n    {\n        \"avoidSinglePipeOperator\": { \"enabled\": false }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0002.html","title":"FL0002","content":"\n# TupleIndentation (FL0002)\n\n## Cause\n\nTuples which span several lines should have consistent indentation.\n\n## Rationale\n\nConsistent indentation provides better readability.\n\n## How To Fix\n\nFix tuple indentation.\n\n## Rule Settings\n\n    {\n        \"tupleIndentation\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0016.html","title":"FL0016","content":"\n# FailwithWithSingleArgument (FL0016)\n\n## Cause\n\n`failwith` is passed more than one argument e.g. `failwith \"Divisor cannot be zero.\" 5`\n\n## Rationale\n\n`failwith` being passed more than one argument (the error message) is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"failwithWithSingleArgument\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0044.html","title":"FL0044","content":"\n# NamespaceNames (FL0044)\n\n## Cause\n\nNamespace naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the namespace's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"namespaceNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0006.html","title":"FL0006","content":"\n# PatternMatchClauseIndentation (FL0006)\n\n## Cause\n\nAll pattern match clauses should be at the same indentation level.\n\n## Rationale\n\nReadability.\n\n## How To Fix\n\nUpdate pattern match clauses to have consistent indentation.\n\n## Rule Settings\n\nUses the `numIndentationSpaces` global setting.\n\n    {\n        \"patternMatchClauseIndentation\": {\n            \"enabled\": false,\n            \"config\": {\n              \"allowSingleLineLambda\": false\n            }\n        }\n    }\n\n* *allowSingleLineLambda* - whether or not to allow single-line lambda pattern matches\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0062.html","title":"FL0062","content":"\n# MaxLinesInFile (FL0062)\n\n## Cause\n\nMore than a configurable number of lines were found in a file.\n\n## Rationale\n\nToo many lines in a file indicate it's becoming too complex.\n\n## How To Fix\n\nRefactor to extract code out into another file.\n\n## Rule Settings\n\n    {\n        \"maxLinesInFile\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLinesInFile\": 1000\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0033.html","title":"FL0033","content":"\n# MaxLinesInClass (FL0033)\n\n## Cause\n\nA class is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a class becomes the more complex it becomes, it also indicates that it may have [too many different responsibilities](http://en.wikipedia.org/wiki/Single_responsibility_principle).\n\n## How To Fix\n\nExtract code out into smaller composable classes.\n\n## Rule Settings\n\n    {\n        \"maxLinesInClass\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 500\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0040.html","title":"FL0040","content":"\n# EnumCasesNames (FL0040)\n\n## Cause\n\nEnum case naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the enum case's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"enumCasesNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0046.html","title":"FL0046","content":"\n# ParameterNames (FL0046)\n\n## Cause\n\nParameter naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the parameter's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"parameterNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"CamelCase\",\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0003.html","title":"FL0002","content":"\n# TupleParentheses (FL0003)\n\n## Cause\n\nMissing parentheses around tuple instantiation.\n\n## Rationale\n\nRecommended by [Microsoft F# code formatting guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#formatting-tuples).\n\n## How To Fix\n\nAdd parentheses around tuple instantiation.\n\n## Rule Settings\n\n    {\n        \"tupleParentheses\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0076.html","title":"FL0076","content":"\n# FavourStaticEmptyFields (FL0076)\n\n*Introduced in `0.21.3`*\n\n## Cause\n\nUse of immediate string \"\", empty list [] or empty array [||].\n\n## Rationale\n\nUsing static empty fields aids readibility.\n\n## How To Fix\n\nUse a static empty field such as String.Empty, List.Empty or Array.empty.\n\n## Rule Settings\n\n    {\n        \"favourStaticEmptyFields\": { \"enabled\": false }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0071.html","title":"FL0071","content":"\n# CyclomaticComplexity (FL0071)\n\n*Reintroduced in `0.20.2`*\n\n## Cause\n\nThe cyclomatic complexity of a function or method exceeds the configured maximum complexity threshold.\n\n## Rationale\n\nCyclomatic complexity provides the number of linearly independent paths through a function or method. Metricating cyclomatic complexity is a requirement for many software product assurance activities prescribed in industry.\n\n## How To Fix\n\nThe cyclomatic complexity of a function or method is incremented by the following contributors:\n* conditional branching (`if`/`else`/`elif`)\n* `match` cases (also applies to `function` pattern matching and `match!`)\n* `for` (for...in) and `foreach` (for i in...to) expressions\n* `while` expressions\n* boolean operators within conditional expressions of the above, or within `when` expressions in the case of `match`\n\nReducing the cyclomatic complexity of a function typically involves decomposing the function into more sub-functions. The cyclomatic complexity calculated by this rule is limited to a single scope of a function or method, i.e. the cyclomatic complexity of a function `g` nested within function `f` is calculated independent of the complexity of `f` and will not contribute to the cyclomatic copmlexity of `f`.\n\n## Rule Settings\n\nThere is a single setting applicable to the cyclomatic complexity, which is the maximum cyclomatic complexity.  \n\n    {\n        \"enabled\": true,\n        \"config\": {\n            \"maxComplexity\": 40\n        }\n    }\n   \n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0081.html","title":"FL0081","content":"\n# NestedFunctionNames (FL0081)\n\n*Introduced in `0.21.8`*\n\n## Cause\n\nNested function naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the nested function names to be consistent with the rules you have specified.\n\n## Rule Settings\n\n    {\n        \"NestedFunctionNames\": {\n            \"enabled\": false,\n            \"config\": {\n                \"naming\": \"CamelCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0036.html","title":"FL0036","content":"\n# InterfaceNames (FL0036)\n\n## Cause\n\nInterface naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the interface's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"interfaceNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\",\n                \"prefix\": \"I\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0001.html","title":"FL0001","content":"\n# TupleCommaSpacing (FL0001)\n\n## Cause\n\nSpace missing after tuple comma.\n\n## Rationale\n\nFor readability, it helps to include a space after tuple commas.\n\n## How To Fix\n\nAdd a space after tuple commas.\n\n## Rule Settings\n\n    {\n        \"tupleCommaSpacing\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0082.html","title":"FL0082","content":"\n# UsedUnderscorePrefixedElements (FL0082)\n\n*Introduced in `0.23.0`*\n\n## Cause\n\nAn underscore-prefixed element is being used.\n\n## Rationale\n\nUnderscore (_) or underscore-prefixed elements are normally used for things that are not being used.\n\n## How To Fix\n\nRemove the underscore prefix or avoid using that element in the code.\n\n## Rule Settings\n\n    {\n        \"usedUnderscorePrefixedElements\": {\n            \"enabled\": true\n        }\n    }\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0017.html","title":"FL0017","content":"\n# RaiseWithSingleArgument (FL0017)\n\n## Cause\n\n`raise` is passed more than one argument e.g. `raise (System.ArgumentException(\"Divisor cannot be zero.\")) 5`\n\n## Rationale\n\n`raise` being passed more than one argument (the exception to be thrown) is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"raiseWithSingleArgument\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0079.html","title":"FL0079","content":"\n# SuggestUseAutoProperty (FL0079)\n\n*Introduced in `0.21.7`*\n\n## Cause\n\nSuggest usage of auto-property (`member val Foo`) when `member self.Foo` is unnecessary.\n\n## Rationale\n\nCleaner code.\n\n## How To Fix\n\nUse auto-property (`member val`) for properties that only return immutable value.\n\n## Rule Settings\n\n    {\n        \"suggestUseAutoProperty\": { \"enabled\": false }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0069.html","title":"FL0069","content":"\n# GenericTypesNames (FL0069)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nGeneric type naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the generic type naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"genericTypesNames\": {\n           \"enabled\": true,\n           \"config\": {\n               \"naming\": \"PascalCase\",\n               \"underscores\": \"None\"\n           }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0028.html","title":"FL0028","content":"\n# MaxLinesInProperty (FL0028)\n\n## Cause\n\nA property is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a property becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nExtract code out into private methods or functions.\n\n## Rule Settings\n\n    {\n        \"MaxLinesInProperty\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 70\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0049.html","title":"FL0049","content":"\n# PublicValuesNames (FL0049)\n\n## Cause\n\nPublic value naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the public value's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"publicValuesNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0054.html","title":"FL0054","content":"\n# MaxNumberOfBooleanOperatorsInCondition (FL0054)\n\n## Cause\n\nA `while/if/assert/match when` condition contains more than a configurable number of boolean operators, for example if `maxItems` was set to 4 (the default value)\nthen the following condition would cause the error: `if x && y || q || r && t && w then`\n\n## Rationale\n\nCan make the control flow become diffcult to understand.\n\n## How To Fix\n\nReduce the number of boolean operators in the `while/if/assert/match when` condition, e.g. a simple way to fix the example in the \"Cause\" section you could name the expression:\n\n    let catIsInBin = x && y || q || r && t && w\n    if catIsInBin then\n\n## Rule Settings\n\n    {\n        \"maxNumberOfBooleanOperatorsInCondition\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxItems\": 4\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0008.html","title":"FL0008","content":"\n# ModuleDeclSpacing (FL0008)\n\n## Cause\n\nUnexpected number of spaces between declarations within module (1 space is expected).\n\n## Rationale\n\nRecommended by [Microsoft F# code formatting guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#formatting-blank-lines).\n\n## How To Fix\n\nUse 1 space between module declarations.\n\n## Rule Settings\n\n    {\n        \"moduleDeclSpacing\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0038.html","title":"FL0038","content":"\n# TypeNames (FL0038)\n\n## Cause\n\nType naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the type's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"typeNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0063.html","title":"FL0063","content":"\n# TrailingNewLineInFile (FL0063)\n\n## Cause\n\nA new line was found at the end of a file.\n\n## Rationale\n\nPointless whitespace.\n\n## How To Fix\n\nRemove any new lines at the end of a file.\n\n## Rule Settings\n\n    {\n        \"trailingNewLineInFile\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/index.html","title":"Overview","content":"\n# Overview\n\nFSharpLint is a style checking tool for F#. It points out locations where a set of rules on how F# is to be styled have been broken.\nThe tool is configurable via JSON and can be run from a console app, or as an MSBuild task. It also provides an interface to easily integrate the tool into other software.\n\nThe project aims to let the user know of problems through [matching user defined hints](./how-tos/rules/FL0065.html)\na la [HLint](http://community.haskell.org/~ndm/hlint/), and also by using custom rules written in F# similar to the rules\nin [Mascot](http://mascot.x9c.fr/manual.html) and [StyleCop](http://stylecop.codeplex.com/).\n\nUsing a `.fsproj` (F# project) or `.sln` (F# solution) file the tool will analyse all of the F# implementation files in the project/solution looking for\ncode that breaks a set of rules governing the style of the code. Examples of rules: lambda functions must be less than 6 lines long, class member identifiers must be PascalCase.\n\n## Usage\n\nFSharpLint can be used in several ways:\n\n* [Running as dotnet tool from command line](./how-tos/install-dotnet-tool.html).\n* [In VS Code using the Ionide-FSharp plugin](https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-fsharp).\n* [In other IDEs (Visual Studio, Rider) as an MSBuild Task](./how-tos/msbuild-task.html).\n* [In other editors through FsAutoComplete Language Server](https://github.com/fsharp/FsAutoComplete)\n\n### Example Usage\n\nThe following program:\n\n    type ExampleInterface =\n       abstract member print : unit -> unit\n\n    [<EntryPoint>]\n    let main argv =\n        let x = List.fold (fun x y -> x + y) 0 [1;2;3]\n        printfn \"%d\" x\n        0\n\nRun against the lint tool generates the following errors:\n\n    FL0036: Consider changing `ExampleInterface` to be prefixed with `I`.\n    Consider changing `ExampleInterface` to be prefixed with `I`.\n    Error in file Program.fs on line 1 starting at column 5\n    type ExampleInterface =\n         ^\n\n    FL0045: Consider changing `print` to PascalCase.\n    Error in file Program.fs on line 2 starting at column 19\n       abstract member print : unit -> unit\n                       ^\n\n    FL0034: If `( + )` has no mutable arguments partially applied then the lambda can be removed.\n    Error in file Program.fs on line 6 starting at column 23\n        let x = List.fold (fun x y -> x + y) 0 [1;2;3]\n                           ^\n\nRefactored using lint's warnings:\n\n    type IExampleInterface =\n       abstract member Print : unit -> unit\n\n    [<EntryPoint>]\n    let main argv =\n        let x = List.fold (+) 0 [1;2;3]\n        printfn \"%d\" x\n        0\n\nIf we run lint again it will find a new error, it's worth running the tool until it no longer finds any errors:\n\n    FL0065: `List.fold ( + ) 0 x` might be able to be refactored into `List.sum x`.\n    Error in file Program.fs on line 6 starting at column 12\n    let x = List.fold (+) 0 [1;2;3]\n            ^\n\nAfter refactoring again we have with no lint errors:\n\n    type IExampleInterface =\n       abstract member Print : unit -> unit\n\n    [<EntryPoint>]\n    let main argv =\n        let x = List.sum [1;2;3]\n        printfn \"%d\" x\n        0\n\n## Configuration Files\n\nConfiguration of the tool is done using JSON.\nA single JSON file containing the default configuration for all rules\nis [included inside of the software](https://github.com/fsprojects/FSharpLint/blob/master/src/FSharpLint.Core/fsharplint.json).\n\nBy default, FSharpLint will use the default configuration. You can override this to point\nto a different file, for example by using the `--lint-config` flag in the dotnet tool.\n\nSee the [Rule Configuration page](./how-tos/rule-configuration.html) for more info.\n\n## Suppressing rules in code\n\nRules can be disabled within the code using structured comments. See the [Suppressing Warnings](./how-tos/rule-suppression.html) page for more information.\n\n## Running Lint From An Application\n\nInstall the [`FSharp.Core` nuget package](https://www.nuget.org/packages/FSharpLint.Core/).\n\nThe namespace `FSharpLint.Application` contains a module named `Lint` which provides several functions\nto lint a project/source file/source string.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/msbuild-task.html","title":"Setup MSBuild Task","content":"\n# Setup MSBuild Task\n\nFSharpLint can be run as an MSBuild task; this will result in lint warnings showing up in your IDE (Visual Studio/Rider).\n\nTo set this up, first [install the FSharpLint dotnet tool](install-dotnet-tool.html).\n\nThen, you can add the following to any of your projects to run linting after build completion for that project:\n\n    <Target Name=\"FSharpLint\" AfterTargets=\"BeforeBuild\">\n     <Exec\n       Command=\"dotnet fsharplint -f msbuild lint --lint-config $(MSBuildThisFileDirectory)/fsharplint.json $(MSBuildProjectFullPath)\"\n       ConsoleToMsBuild=\"true\"\n       IgnoreExitCode=\"false\"\n     />\n    </Target>\n\nIf you would like to enable linting for all projects, you can add the above target to either a `Directory.Build.props` or `Directory.Build.targets` file in the root of your repository. This will add the target to all files. See [here](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019) for more info\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rule-configuration.html","title":"Rule Config","content":"\n# Rule Configuration\n\n## Creating a Configuration File\n\nThe linter by default looks for a file named `fsharplint.json` in the current working directory. Typically you would have this file in the root of your project.\n\nAt this moment in time the configuration requires every rule to be added to your file, rather than a typical approach where you would override just the rules you want to change from their defaults. This will be addressed in a future version see: [Issue #488](https://github.com/fsprojects/FSharpLint/issues/488).\n\nCheck out the [default configuration](https://github.com/fsprojects/FSharpLint/blob/master/src/FSharpLint.Core/fsharplint.json) that the tool comes with to see all possible settings and their default values.\n\n## Global Configuration\n\nIn addition to the configuration available for each rule, there are some settings which are defined globally to maintain consistency across\nmultiple rules. These are defind in the `globals` object in the base of the configuration file. The rule pages below point out any global\nsetting that each rule depends on. The config is as follows, but can be completely omitted to use defaults:\n\n    {\n      \"globals\": {\n        \"numIndentationSpaces\": 4 // number of spaces used for indentation\n      }\n    }\n\n## Ignoring Files\n\nIn the configuration file paths can be used to specify files that should be included, globs are used to match wildcard directories and files. For example the following will match all files with the file name assemblyinfo (the matching is case insensitive) with any extension:\n\n    { \"ignoreFiles\": [\"assemblyinfo.*\"] }\n\n* Directories in the path must be separated using `/`\n* If the path ends with a `/` then everything inside of a matching directory shall be excluded.\n* If the path does not end with a `/` then all matching files are excluded.\n\n\n## <a name=\"ruleList\"></a>Rule List\n\nThe following rules can be specified for linting.\n\n- [TupleCommaSpacing (FL0001)](rules/FL0001.html)\n- [TupleIndentation (FL0002)](rules/FL0002.html)\n- [TupleParentheses (FL0003)](rules/FL0003.html)\n- [PatternMatchClausesOnNewLine (FL0004)](rules/FL0004.html)\n- [PatternMatchOrClausesOnNewLine (FL0005)](rules/FL0005.html)\n- [PatternMatchClauseIndentation (FL0006)](rules/FL0006.html)\n- [PatternMatchExpressionIndentation (FL0007)](rules/FL0007.html)\n- [ModuleDeclSpacing (FL0008)](rules/FL0008.html)\n- [ClassMemberSpacing (FL0009)](rules/FL0009.html)\n- [TypedItemSpacing (FL0010)](rules/FL0010.html)\n- [TypePrefixing (FL0011)](rules/FL0011.html)\n- [UnionDefinitionIndentation (FL0012)](rules/FL0012.html)\n- [RecursiveAsyncFunction (FL0013)](rules/FL0013.html)\n- [RedundantNewKeyword (FL0014)](rules/FL0014.html)\n- [NestedStatements (FL0015)](rules/FL0015.html)\n- [FailwithWithSingleArgument (FL0016)](rules/FL0016.html)\n- [RaiseWithSingleArgument (FL0017)](rules/FL0017.html)\n- [NullArgWithSingleArgument (FL0018)](rules/FL0018.html)\n- [InvalidOpWithSingleArgument (FL0019)](rules/FL0019.html)\n- [InvalidArgWithTwoArguments (FL0020)](rules/FL0020.html)\n- [FailwithfWithArgumentsMatchingFormattingString (FL0021)](rules/FL0021.html)\n- [MaxLinesInLambdaFunction (FL0022)](rules/FL0022.html)\n- [MaxLinesInMatchLambdaFunction (FL0023)](rules/FL0023.html)\n- [MaxLinesInValue (FL0024)](rules/FL0024.html)\n- [MaxLinesInFunction (FL0025)](rules/FL0025.html)\n- [MaxLinesInMember (FL0026)](rules/FL0026.html)\n- [MaxLinesInConstructor (FL0027)](rules/FL0027.html)\n- [MaxLinesInProperty (FL0028)](rules/FL0028.html)\n- [MaxLinesInModule (FL0029)](rules/FL0029.html)\n- [MaxLinesInRecord (FL0030)](rules/FL0030.html)\n- [MaxLinesInEnum (FL0031)](rules/FL0031.html)\n- [MaxLinesInUnion (FL0032)](rules/FL0032.html)\n- [MaxLinesInClass (FL0033)](rules/FL0033.html)\n- [ReimplementsFunction (FL0034)](rules/FL0034.html)\n- [CanBeReplacedWithComposition (FL0035)](rules/FL0035.html)\n- [InterfaceNames (FL0036)](rules/FL0036.html)\n- [ExceptionNames (FL0037)](rules/FL0037.html)\n- [TypeNames (FL0038)](rules/FL0038.html)\n- [RecordFieldNames (FL0039)](rules/FL0039.html)\n- [EnumCasesNames (FL0040)](rules/FL0040.html)\n- [UnionCasesNames (FL0041)](rules/FL0041.html)\n- [ModuleNames (FL0042)](rules/FL0042.html)\n- [LiteralNames (FL0043)](rules/FL0043.html)\n- [NamespaceNames (FL0044)](rules/FL0044.html)\n- [MemberNames (FL0045)](rules/FL0045.html)\n- [ParameterNames (FL0046)](rules/FL0046.html)\n- [MeasureTypeNames (FL0047)](rules/FL0047.html)\n- [ActivePatternNames (FL0048)](rules/FL0048.html)\n- [PublicValuesNames (FL0049)](rules/FL0049.html)\n- [<s>NonPublicValuesNames (FL0050)</s>](rules/FL0050.html) (Removed in `0.20.0`)\n- [MaxNumberOfItemsInTuple (FL0051)](rules/FL0051.html)\n- [MaxNumberOfFunctionParameters (FL0052)](rules/FL0052.html)\n- [MaxNumberOfMembers (FL0053)](rules/FL0053.html)\n- [MaxNumberOfBooleanOperatorsInCondition (FL0054)](rules/FL0054.html)\n- [FavourIgnoreOverLetWild (FL0055)](rules/FL0055.html)\n- [WildcardNamedAsPattern (FL0056)](rules/FL0056.html)\n- [UselessBinding (FL0057)](rules/FL0057.html)\n- [TupleOfWildcards (FL0058)](rules/FL0058.html)\n- [Indentation (FL0059)](rules/FL0059.html)\n- [MaxCharactersOnLine (FL0060)](rules/FL0060.html)\n- [TrailingWhitespaceOnLine (FL0061)](rules/FL0061.html)\n- [MaxLinesInFile (FL0062)](rules/FL0062.html)\n- [TrailingNewLineInFile (FL0063)](rules/FL0063.html)\n- [NoTabCharacters (FL0064)](rules/FL0064.html)\n- [Hints (FL0065)](rules/FL0065.html)\n- [NoPartialFunctions (FL0066)](rules/FL0066.html)\n- [PrivateValuesNames (FL0067)](rules/FL0067.html)\n- [InternalValuesNames (FL0068)](rules/FL0068.html)\n- [GenericTypesNames (FL0069)](rules/FL0069.html)\n- [FavourTypedIgnore (FL0070)](rules/FL0070.html)\n- [CyclomaticComplexity (FL0071)](rules/FL0071.html)\n- [FailwithBadUsage (FL0072)](rules/FL0072.html)\n- [FavourReRaise (FL0073)](rules/FL0073.html)\n- [FavourConsistentThis (FL0074)](rules/FL0074.html)\n- [AvoidTooShortNames (FL0075)](rules/FL0075.html)\n- [FavourStaticEmptyFields (FL0076)](rules/FL0076.html)\n- [AvoidSinglePipeOperator (FL0077)](rules/FL0077.html)\n- [AsyncExceptionWithoutReturn (FL0078)](rules/FL0078.html)\n- [SuggestUseAutoProperty (FL0079)](rules/FL0079.html)\n- [UnnestedFunctionNames (FL0080)](rules/FL0080.html)\n- [NestedFunctionNames (FL0081)](rules/FL0081.html)\n- [UsedUnderscorePrefixedElements (FL0082)](rules/FL0082.html)\n- [UnneededRecKeyword (FL0083)](rules/FL0083.html)\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/install-dotnet-tool.html","title":"Install Dotnet Tool","content":"\n# Installing as dotnet tool\n\nThe linter can be [installed as a dotnet tool](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-tool-install).\n\nInstall as a global tool: `dotnet tool install -g dotnet-fsharplint`.\n\nInstall as tool to specific directory: `dotnet tool install --tool-path <my_directory> dotnet-fsharplint`\n\n## Running the Console Application\n\nThe console application is a wrapper around the linter. For basic usage, just run `dotnet fsharplint lint <input>`, where `input` can be an fsproj, sln, fs, fsx file, or a string of source code.\n\nRun `dotnet fsharplint --help` for full usage information.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rule-suppression.html","title":"Rule Suppression","content":"\n# Rule Suppression\n\nThe linter's rules can be suppressed using structured comments.\n\nThe following comments are available for use:\n\n- `// fsharplint:disable` disables rules for all lines following the comment.\n- `// fsharplint:enable` re-enables all disabled rules.\n- `// fsharplint:disable-next-line` disables rules for the next line.\n- `// fsharplint:disable-line` disables rules for the current line.\n\nOnly one structured comment can be specified per line; any additional ones will be ignored.\n\n## Disabling Specific Rules\n\nThe disable comments allow for specific rules to be disabled by specifying the rules whitespace separated at the end of the comment, for example:\n\n- `// fsharplint:disable TypePrefixing Hints` disables the rules `TypePrefixing` and `Hints`.\n- `// fsharplint:disable-next-line TypePrefixing` disables the rule `TypePrefixing`.\n\nIf no rules a specified then all rules are disabled, for example:\n\n- `// fsharplint:disable` disables all rules.\n\n## Examples\n\n### Disable Entire File\n\n```fsharp\n// fsharplint:disable\n```\n\nPrecede the file with the comment above.\n\n### Disable Section of the File\n\n```fsharp\n// fsharplint:disable RecordFieldNames\ntype MyType =\n    { xyz: string\n      foo: string }\n// fsharplint:enable\n```\n\nDisables the `RecordFieldNames` rule between the disable and enable comments.\n\n```fsharp\n// fsharplint:disable\ntype sometype =\n    { xyz: string\n      foo: string }\n// fsharplint:enable\n```\n\nDisables all rules between the disable and enable comments.\n\n### Disable Next Line\n\n```fsharp\n// fsharplint:disable-next-line Hints\nlet x = not true\n```\n\nDisables the `Hints` rule for the next line.\n\n```fsharp\n// fsharplint:disable-next-line\nlet x = not true\n```\n\nDisables all rules for the next line.\n\n### Disable Current Line\n\n```fsharp\nlet x = not true // fsharplint:disable-line Hints\n```\n\nDisables the `Hints` rule for the current line.\n\n```fsharp\nlet x = not true // fsharplint:disable-line\n```\n\nDisables all rules for the current line.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0043.html","title":"FL0043","content":"\n# LiteralNames (FL0043)\n\n## Cause\n\nLiteral naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the literal's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"literalNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0011.html","title":"FL0011","content":"\n# TypePrefixing (FL0011)\n\n## Cause\n\nIncorrect formatting for higher order type.\n\n## Rationale\n\nRecommended by [Microsoft F# code formatting guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#formatting-discriminated-union-declarations).\n\n## How To Fix\n\nUpdate higher order type to have correct formatting as per guide linked above.\n\n## Rule Settings\n\n    {\n        \"typePrefixing\": {\n            \"enabled\": false,\n            \"config\": {\n                \"mode\": \"Hybrid\"\n            }\n        }\n    }\n\n* *mode* - how to enforce the rule (\"Hybrid\" or \"Always\" or \"Never\")\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0031.html","title":"FL0031","content":"\n# MaxLinesInEnum (FL0031)\n\n## Cause\n\nAn enum is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a enum becomes the more complex it becomes, it also indicates that all the items may not be related.\n\n## How To Fix\n\nExtract code out into smaller enums.\n\n## Rule Settings\n\n    {\n        \"maxLinesInEnum\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 500\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0074.html","title":"FL0074","content":"\n# FavourConsistentThis (FL0074)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nDifferent symbol was used for the instance identifier (e.g. using `this`, and also `self`).\n\n## Rationale\n\nUsing the same symbol for the instance identifier (e.g. `this` everywhere, or `self` everywhere) aids readability.\n\n## How To Fix\n\nReplace all occurrences of the instance symbol used with the one configured in the rule settings (e.g. if using both `self` and `this` in the same codebase, decide which one to keep, and then only use one of them, not both).\n\n## Rule Settings\n\n    {\n        \"favourConsistentThis\": {\n            \"enabled\": false,\n            \"config\": {\n                \"symbol\": \"this\"\n            }\n        }\n    }\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0018.html","title":"FL0018","content":"\n# NullArgWithSingleArgument (FL0018)\n\n## Cause\n\n`nullArg` is passed more than one argument e.g. `nullArg \"Divisor cannot be zero.\" 5`\n\n## Rationale\n\n`nullArg` being passed more than one argument (the error message) is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"nullArgWithSingleArgument\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0012.html","title":"FL0012","content":"\n# UnionDefinitionIndentation (FL0012)\n\n## Cause\n\nIncorrect indentation for union definition.\n\n## Rationale\n\nRecommended by [Microsoft F# code formatting guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#use-prefix-syntax-for-generics-foot-in-preference-to-postfix-syntax-t-foo).\n\n## How To Fix\n\nUpdate union definition to have correct formatting as specified in linked guide (indent `|` by 4 spaces).\n\n## Rule Settings\n\nUses the `numIndentationSpaces` global setting.\n\n    {\n        \"unionDefinitionIndentation\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0034.html","title":"FL0034","content":"\n# ReimplementsFunction (FL0034)\n\n## Cause\n\nA lambda function does nothing other than call an existing function, two examples below:\n\n`fun x y -> x + y`\n`fun x y -> foo x y`\n\n## Rationale\n\nThe lambda functions are redundant.\n\n## How To Fix\n\nReplace the lambda with the function that is being called.\n\n`fun x y -> x + y` is the same as `(+)`\n`fun x y -> foo x y` is the same as `foo`\n\n## Rule Settings\n\n    {\n        \"reimplementsFunction\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0023.html","title":"FL0023","content":"\n# MaxLinesInMatchLambdaFunction (FL0023)\n\n## Cause\n\nA match function is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a function becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nUse active patterns to help reduce the number of matches/extract code out into composable functions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInMatchLambdaFunction\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 100\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0056.html","title":"FL0056","content":"\n# WildcardNamedWithAsPattern (FL0056)\n\n## Cause\n\nA wildcard is given a name using the as pattern e.g. `match something with | _ as x -> x + y`\n\n## Rationale\n\nThe wildcard and as pattern can be replaced with the identifier the value is to be bound to.\n\n## How To Fix\n\nReplace the wildcard with the identifier the wildcard is currently being bound to, e.g. change `match something with | _ as x -> x + y` to `match something with | x -> x + y`\n\n## Rule Settings\n\n    {\n        \"wildcardNamedWithAsPattern\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0070.html","title":"FL0070","content":"\n# FavourTypedIgnore (FL0070)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nUse of `ignore` function is untyped.\n\n## Rationale\n\nSpecifying a type prevents mistakes and aides maintainability.\n\n## How To Fix\n\nAdd the type of the element being ignored as a type parameter to the `ignore`\ninvokation, e.g. `ignore<string>`.\n\n## Rule Settings\n\n    {\n        \"favourTypedIgnore\": {\n           \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0035.html","title":"FL0035","content":"\n# CanBeReplacedWithComposition (FL0035)\n\n## Cause\n\nA lambda function applies a single argument to a chain of function calls, two examples below:\n\n`fun x -> not(isValid(x))`\n`fun x -> x |> isValid |> not`\n\n## Rationale\n\nThe lambda functions are redundant.\n\n## How To Fix\n\nReplace the lambda with function composition:\n\n`fun x -> not(isValid(x))` and `fun x -> x |> isValid |> not` are the same as `isValid >> not`\n\n## Rule Settings\n\n    {\n        \"canBeReplacedWithComposition\": {\n            \"enabled\": true\n        }\n    }\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0080.html","title":"FL0080","content":"\n# UnnestedFunctionNames (FL0080)\n\n*Introduced in `0.21.8`*\n\n## Cause\n\nUnnested function naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the unnested function names to be consistent with the rules you have specified.\n\n## Rule Settings\n\n    {\n        \"UnnestedFunctionNames\": {\n            \"enabled\": false,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0041.html","title":"FL0041","content":"\n# UnionCasesNames (FL0041)\n\n## Cause\n\nUnion case naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the union case's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"unionCasesNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0075.html","title":"FL0075","content":"\n# AvoidTooShortNames (FL0075)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nName used for element (symbol, variable, member, parameter) is too short.\n\n## Rationale\n\nNames represent information. Names that are too short give poor information about what they represent.\n\n## How To Fix\n\nUse longer names for the flagged occurrences.\n\n## Rule Settings\n\n    {\n        \"avoidTooShortNames\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0083.html","title":"FL0083","content":"\n# UnneededRecKeyword (FL0083)\n\n*Introduced in `0.23.8`*\n\n## Cause\n\nRecursive function (function marked with a \"rec\" keyword) does not invoke itself.\n\n## Rationale\n\nUsing \"rec\" keyword on a function that is not recursive is unnecessary.\n\n## How To Fix\n\nUpdate the function to invoke itself or remove \"rec\" keyword in case it doesn't need to invoke itself recursively.\n\n## Rule Settings\n\n    {\n        \"unneededRecKeyword\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0022.html","title":"FL0022","content":"\n# MaxLinesInLambdaFunction (FL0022)\n\n## Cause\n\nA lambda function is made up of more than a configurable number of lines.\n\n## Rationale\n\nLambda functions are usually used for single lines of code that aren't worth naming to make code more concise. A large lambda function indicates it should probably be a named function.\n\n## How To Fix\n\nConsider using a named function rather than a lambda function.\n\n## Rule Settings\n\n    {\n        \"maxLinesInLambdaFunction\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 7\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0037.html","title":"FL0037","content":"\n# ExceptionNames (FL0037)\n\n## Cause\n\nException naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the exception's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"exceptionNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\",\n                \"suffix\": \"Exception\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0015.html","title":"FL0015","content":"\n# NestedStatements (FL0015)\n\nSingle rule that checks code is not more deeply nested than a configurable depth.\n\n## Cause\n\nA statement is nested deeper than a configurable depth, for example if `depth` was set to 8 (the default) then the following code would cause an error:\n\n    let dog =\n\t\tif true then \t\t\t\t\t\t\t\t\t// Depth 1\n\t\t\tif true then\t\t\t\t\t\t\t\t// Depth 2\n\t\t\t\tif true then\t\t\t\t\t\t\t// Depth 3\n\t\t\t\t\tif true then\t\t\t\t\t\t// Depth 4\n\t\t\t\t\t\tif true then\t\t\t\t\t// Depth 5\n\t\t\t\t\t\t\tif true then\t\t\t\t// Depth 6\n\t\t\t\t\t\t\t\tif true then\t\t\t// Depth 7\n\t\t\t\t\t\t\t\t\tif true then\t\t// Depth 8\n\t\t\t\t\t\t\t\t\t\t()\t\t// Depth 9!!\n\n## Rationale\n\nWhen code becomes too deeply nested it becomes more difficult to read and understand, try to refactor nested code out into functions.\n\n## How To Fix\n\nReduce the depth of the deepest statement, e.g. to fix the example in the \"Cause\" section you'd take out on level of depth:\n\n    let dog =\n\t\tif true then \t\t\t\t\t\t\t\t\t// Depth 1\n\t\t\tif true then\t\t\t\t\t\t\t\t// Depth 2\n\t\t\t\tif true then\t\t\t\t\t\t\t// Depth 3\n\t\t\t\t\tif true then\t\t\t\t\t\t// Depth 4\n\t\t\t\t\t\tif true then\t\t\t\t\t// Depth 5\n\t\t\t\t\t\t\tif true then\t\t\t\t// Depth 6\n\t\t\t\t\t\t\t\tif true then\t\t\t// Depth 7\n\t\t\t\t\t\t\t\t\t()\t\t\t// Depth 8\n\n## Rule Settings\n\n    {\n        \"nestedStatements\": {\n            \"enabled\": false,\n            \"config\": {\n                \"depth\": 8\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0064.html","title":"FL0064","content":"\n# NoTabCharacters (FL0064)\n\n## Cause\n\nA tab character was found in a file.\n\n## Rationale\n\nIt's best practice to use spaces to indent code rather than tabs, this is because tabs have different widths on different platforms.\n\n## How To Fix\n\nReplace the tab with spaces.\n\n## Rule Settings\n\n    {\n        \"noTabCharacters\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0025.html","title":"FL0025","content":"\n# MaxLinesInFunction (FL0025)\n\n## Cause\n\nA function is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a function becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nRefactor to extract out code into smaller composable functions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInFunction\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 100\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0073.html","title":"FL0073","content":"\n# FavourReRaise (FL0073)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nAn exception was re-thrown (re-raised) without the use of function `reraise()`.\n\n## Rationale\n\nUsing `raise ex` (inside a `try..with|ex` block) to re-raise an exception is not ideal, as it loses valuable stacktrace information from the original exception.\n\n## How To Fix\n\nUse `reraise()` instead of `raise ex`.\n\n## Rule Settings\n\n    {\n        \"favourReRaise\": {\n           \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0058.html","title":"FL0058","content":"\n# TupleOfWildcards (FL0058)\n\n## Cause\n\nA constructor in a pattern has arguments that consist entirely of wildcards e.g. `SynPat.Paren(_, _)`\n\n## Rationale\n\nThe tuple of wildcards can be replaced with a single wildcard.\n\n## How To Fix\n\nReplace the tuple with a single wildcard e.g. the example in the cause could be turned into `SynPat.Paren(_)`\n\n## Rule Settings\n\n    {\n        \"tupleOfWildcards\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0004.html","title":"FL0004","content":"\n# PatternMatchClausesOnNewLine (FL0004)\n\n## Cause\n\nAll pattern match clauses should be on their own line.\n\n## Rationale\n\nReadability.\n\n## How To Fix\n\nPlace each pattern match clause on its own line.\n\n## Rule Settings\n\n    {\n        \"patternMatchClausesOnNewLine\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0078.html","title":"FL0078","content":"\n# AsyncExceptionWithoutReturn (FL0078)\n\n*Introduced in `0.21.6`*\n\n## Cause\n\nMissing \"return\" keyword inside async blocks when throwing exceptions.\n\n## Rationale\n\nWhen returning values or throwing exception in async blocks, the \"return\" keyword must be used.\n\n## How To Fix\n\nAdd \"return\" keyword to your raise/failwith/failwithf statment.\n\n## Rule Settings\n\n    {\n        \"asyncExceptionWithoutReturn\": { \"enabled\": false }\n    }"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0066.html","title":"FL0066","content":"\n# NoPartialFunctions (FL0066)\n\n## Cause\n\nA partial function was used.\n\n## Rationale\n\nPartial functions are only valid for certain inputs; for invalid inputs they will throw an exception. In most cases,\nit is better to use a non-partial version of the function (e.g. `List.tryFind` instead of `List.find`) or use pattern matching,\nso that you need to explicitly handle those cases which would cause an exception in the partial version.\n\n## How To Fix\n\nUse non-partial function or pattern matching.\n\n## Rule Settings\n\n    {\n        \"noPartialFunctions\": {\n            \"enabled\": false,\n            \"config\": {\n              \"allowedPartials\": [],\n              \"additionalPartials\": []\n            }\n        }\n    }\n\n* *allowedPartials* - list of strings representing partial functions to allow (e.g. `\"List.tryFind\"`)\n* *additionalPartials* - list of strings representing additional partial functions to disallow\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0068.html","title":"FL0068","content":"\n# InternalValuesNames (FL0068)\n\n*Introduced in `0.20.0`*\n\n## Cause\n\nValue with internal visibility's naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the internal value's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"internalValuesNames\": {\n           \"enabled\": true,\n            \"config\": {\n                \"naming\": \"CamelCase\",\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0020.html","title":"FL0020","content":"\n# InvalidArgWithTwoArguments (FL0020)\n\n## Cause\n\n`invalidArg` is passed more than two arguments e.g. `invalidArg \"month\" \"Expected value between 1 and 12\"`\n\n## Rationale\n\n`invalidArg` being passed more than two arguments is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"invalidArgWithTwoArguments\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0007.html","title":"FL0007","content":"\n# PatternMatchExpressionIndentation (FL0007)\n\n## Cause\n\nAll pattern match expressions (to the right of -> after clause) should be at the same indentation level.\n\n## Rationale\n\nReadability.\n\n## How To Fix\n\nUpdate pattern match expressions to have consistent indentation.\n\n## Rule Settings\n\nUses the `numIndentationSpaces` global setting.\n\n    {\n        \"patternMatchExpressionIndentation\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0045.html","title":"FL0045","content":"\n# MemberNames (FL0045)\n\n## Cause\n\nMember naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the member's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"memberNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0067.html","title":"FL0067","content":"\n# PrivateValuesNames (FL0067)\n\n*Introduced in `0.20.0`*\n\n## Cause\n\nValue with private visibility's naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the private value's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"privateValuesNames\": {\n           \"enabled\": true,\n            \"config\": {\n                \"naming\": \"CamelCase\",\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0051.html","title":"FL0051","content":"\n# MaxNumberOfItemsInTuple (FL0051)\n\n## Cause\n\nA tuple contains more than a configurable number of items, for example if `maxItems` was set to 4 (the default value)\nthen the following statement would cause the error: `let tup = (1, 2, 3, 5, 6)`\n\n## Rationale\n\nTuple's items are not named, the more items there are the harder it is to work out what each is for.\n\n## How To Fix\n\nReduce the number of items in the tuple, ideally replace the tuple with a record.\n\n## Rule Settings\n\n    {\n        \"maxNumberOfItemsInTuple\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxItems\": 4\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0057.html","title":"FL0057","content":"\n# UselessBinding (FL0057)\n\n## Cause\n\nAn identifier is binded to itself e.g. `let x = x`\n\n## Rationale\n\nPointless statement likely to be an error.\n\n## How To Fix\n\nRemove the binding.\n\n## Rule Settings\n\n    {\n        \"uselessBinding\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0048.html","title":"FL0048","content":"\n# ActivePatternNames (FL0048)\n\n## Cause\n\nActive pattern naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the active pattern's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"activePatternNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0029.html","title":"FL0029","content":"\n# MaxLinesInModule (FL0029)\n\n## Cause\n\nA module is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a module becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nExtract code out into smaller modules.\n\n## Rule Settings\n\n    {\n        \"maxLinesInModule\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 1000\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0042.html","title":"FL0042","content":"\n# ModuleNames (FL0036)\n\nSet of rules that analyse the naming of user defined elements within a program.\n\n## Cause\n\nModule naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the module's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"moduleNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0050.html","title":"FL0050","content":"\n# <s>NonPublicValuesNames (FL0050)</s> (Removed)\n\n**Removed in version `0.20.0`. Replaced by [FL0067](FL0067.html) and [FL0068](FL0068.html).**\n\n## Cause\n\nNon-public value naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the non-public value's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"nonPublicValuesNames\": {\n           \"enabled\": true,\n            \"config\": {\n                \"naming\": \"CamelCase\",\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0059.html","title":"FL0059","content":"\n# Indentation (FL0059)\n\n## Cause\n\nInconsistent indentation in file.\n\n## Rationale\n\nReadability.\n\n## How To Fix\n\nUpdate file to use consistent amount of spaces for indentation.\n\n## Rule Settings\n\nUses the `numIndentationSpaces` global setting.\n\n    {\n        \"indentation\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0039.html","title":"FL0039","content":"\n# RecordFieldNames (FL0039)\n\n## Cause\n\nRecord field naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the record field's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"recordFieldNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0061.html","title":"FL0061","content":"\n# TrailingWhitespaceOnLine (FL0061)\n\n## Cause\n\nWhitespace was found at the end of a line.\n\n## Rationale\n\nPointless whitespace.\n\n## How To Fix\n\nRemove any whitespace from the end of the line.\n\n## Rule Settings\n\n    {\n        \"trailingWhitespaceOnLine\": {\n            \"enabled\": false,\n            \"config\": {\n                \"numberOfSpacesAllowed\": 1,\n                \"oneSpaceAllowedAfterOperator\": true,\n                \"ignoreBlankLines\": true\n            }\n        }\n    }\n\n* *numberOfSpacesAllowed* - An integer property that specifies how many space characters are allowed on the end of a line. (Default 1)\n* *oneSpaceAllowedAfterOperator* - A boolean property that will allow a single space on the end of the line if it's preceded by an operator/symbol character. (Default true)\n* *ignoreBlankLines* - A boolean property that will ignore any lines that are made up of just whitespace. (Default true)\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0010.html","title":"FL0010","content":"\n# TypedItemSpacing (FL0010)\n\n## Cause\n\nChecks spacing around a typed item, e.g. `(number:int)`.\n\n## Rationale\n\nConsistency and readability.\n\n## How To Fix\n\nUpdate typed item to use configured spacing.\n\n## Rule Settings\n\n    {\n        \"typedItemSpacing\": {\n            \"enabled\": false,\n            \"config\": {\n                \"typedItemStyle\": \"NoSpaces\"\n            }\n        }\n    }\n\n* *typedItemStyle* - style of spacing: \"NoSpaces\", \"SpaceAfter\", \"SpacesAround\"\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0055.html","title":"FL0055","content":"\n# FavourIgnoreOverLetWild (FL0055)\n\n## Cause\n\nA value is binded to a wildcard e.g. `let _ = Console.ReadLine()`\n\n## Rationale\n\nUsing the ignore function makes it clear what is intended to happen, rather than something that may be a mistake.\n\n## How To Fix\n\nPipe the value into the ignore function e.g. `Console.ReadLine() |> ignore`\n\n## Rule Settings\n\n    {\n        \"favourIgnoreOverLetWild\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0072.html","title":"FL0072","content":"\n# FailwithBadUsage (FL0072)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nUsing failwith in improper places or with dubious parameters.\n\n## Rationale\n\nPassing empty strings or duplicate messages to failwith statements makes it much harder to understand/locate & subsequently fix bugs. \nIt's also true when exceptions are swallowed in try...with blocks.\n\n## How To Fix\n\nDo not pass an empty string or a duplicate message to failwith. In case of swallowing exception messages in try...with blocks, pass\nthe exception as an innerException parameter of a new Exception: `raise <| Exception(\"Error message\", ex)`.\n\n## Rule Settings\n\n    {\n        \"failwithBadUsage\": {\n           \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0021.html","title":"FL0021","content":"\n# FailwithfWithArgumentsMatchingFormatString (FL0021)\n\n## Cause\n\n`failwithf` is passed more arguments than the format string (first argument) species e.g. `failwithf \"%d\" 5 5`\n\n## Rationale\n\n`failwithf` being passed more arguments than the format string (first argument) specifies is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"failwithfWithArgumentsMatchingFormatString\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0019.html","title":"FL0019","content":"\n# InvalidOpWithSingleArgument (FL0019)\n\n## Cause\n\n`invalidOp` is passed more than one argument e.g. `invalidOp \"Divisor cannot be zero.\" 5`\n\n## Rationale\n\n`invalidOp` being passed more than one argument (the error message) is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"invalidOpWithSingleArgument\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0024.html","title":"FL0024","content":"\n# MaxLinesInValue (FL0024)\n\n## Cause\n\nA statement binded to a value is made up of more than a configurable number of lines.\nFor example the following would break the rule when the maximum number of lines is set to 4:\n\n    let value =\n\t\tlet x = 7\n\t\tlet y = 6\n\t\tlet e = 5\n\t\tlet r = 4\n\t\tr * y * e * x\n\n## Rationale\n\nThe larger a value becomes the more complex it becomes.\n\n## How To Fix\n\nRefactor to extract out code into smaller composable functions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInValue\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 100\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0027.html","title":"FL0027","content":"\n# MaxLinesInConstructor (FL0027)\n\n## Cause\n\nA class constructor is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a constructor becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nExtract code out into private methods or functions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInConstructor\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 100\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0052.html","title":"FL0052","content":"\n# MaxNumberOfFunctionParameters (FL0052)\n\n## Cause\n\nA function contains more than a configurable number of parameters, for example if `maxItems` was set to 5 (the default value)\nthen the following condition would cause the error: `let findCat one two three four five six = 0`\n\n## Rationale\n\nToo many parameters make the function difficult to use.\n\n## How To Fix\n\nReduce the number of function parameters, e.g. to fix the example in the \"Cause\": `let findCat one two three four five = 0`. A good way to reduce the number of parameters is to group them using records.\n\n## Rule Settings\n\n    {\n        \"maxNumberOfFunctionParameters\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxItems\": 5\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0030.html","title":"FL0030","content":"\n# MaxLinesInRecord (FL0030)\n\n## Cause\n\nA record is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a record becomes the more complex it becomes, it also indicates that all the items may not be related.\n\n## How To Fix\n\nExtract code out into smaller composed records.\n\n## Rule Settings\n\n    {\n        \"maxLinesInRecord\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 500\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0014.html","title":"FL0014","content":"\n# RedundantNewKeyword (FL0014)\n\n## Cause\n\nUsing `new` to instantiate a type which does not implement `IDisposable`.\n\n## Rationale\n\n`new` is redundant for instantiating types which do not implement `IDisposable`.\n\n## How To Fix\n\nRemove `new` keyword.\n\n## Rule Settings\n\n    {\n        \"redundantNewKeyword\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0009.html","title":"FL0009","content":"\n# ClassMemberSpacing (FL0009)\n\n## Cause\n\nUnexpected number of spaces between declarations within module (2 spaces are expected).\n\n## Rationale\n\nRecommended by [Microsoft F# code formatting guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#formatting-blank-lines).\n\n## How To Fix\n\nUse 2 space between class members.\n\n## Rule Settings\n\n    {\n        \"classMemberSpacing\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0013.html","title":"FL0013","content":"\n# RecursiveAsyncFunction (FL0013)\n\n## Cause\n\nRecursive async function ending in `do!` instead of `return!` is unsafe.\n\n## Rationale\n\nIf you end your recursive function with `do!` instead of `return!`, the compiler\ncannot perform tail-call optimization.\n\n## How To Fix\n\nUse `return!` instead of `do!`\n\n## Rule Settings\n\n    {\n        \"recursiveAsyncFunction\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0053.html","title":"FL0053","content":"\n# MaxNumberOfMembers (FL0053)\n\n## Cause\n\nA class contains more than a configurable number of members (`maxItems`).\n\n## Rationale\n\nThe class is likely to be doing too much and violating the single responsibility principle.\n\n## How To Fix\n\nReduce the number of members in the class, e.g. extract them out to another class.\n\n## Rule Settings\n\n    {\n        \"maxNumberOfMembers\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxItems\": 32\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0032.html","title":"FL0032","content":"\n# MaxLinesInUnion (FL0032)\n\n## Cause\n\nA discriminated union is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a discriminated union becomes the more complex it becomes, it also indicates that all the items may not be related.\n\n## How To Fix\n\nExtract code out into smaller composed discriminated unions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInUnion\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 500\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0026.html","title":"FL0026","content":"\n# MaxLinesInMember (FL0026)\n\n## Cause\n\nA member is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a member becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nExtract code out into private methods or functions.\n\n## Rule Settings\n\n    {\n        \"maxLinesInMember\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 100\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0060.html","title":"FL0060","content":"\n# MaxCharactersOnLine (FL0060)\n\n## Cause\n\nMore than a configurable number of characters were on a single line.\n\n## Rationale\n\nToo many characters on a single line make code harder to read by forcing the reader to scroll horizontally.\n\n## How To Fix\n\nBreak the line up into multiple lines.\n\n## Rule Settings\n\n    {\n        \"maxCharactersOnLine\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxCharactersOnLine\": 120\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0065.html","title":"FL0065","content":"\n# Hints (FL0065)\n\n## Introduction\n\nThe Hints analyser is inspired by [HLint](https://github.com/ndmitchell/hlint). The hints let users easily write their own rules which are matched against linted code and when matched produce a suggestion that the user provides as part of the hint.\n\nEvery hint is formed of two parts: the match and the suggestion. Both the match and the suggestion are parsed the same way into ASTs, but they have two different purposes; the match AST is analysed against the code being linted looking for any expressions in the code that match the AST, and if there is a match then the suggestion AST is used to display a suggestion on how the code can be refactored.\n\n## Matching\n\n### Match Any Expression\n\nAny F# expression can be matched by a variable or wildcard.\n\n* A variable is represented by a single letter e.g. `x`\n* A wildcard is represented by the character `_`\n\nVariables and wildcards are seemingly the same, and in terms of matching they are. The key difference is that using a variable lets you refer to it in the suggestion, enabling you to show where the matched expression should be moved within the matched code.\n\nFor example if we wanted to match the following:\n\n    not ((4 + 4) >= (x + 77 * (9 * y)))\n\nand suggest the following (which is equivalent):\n\n    (4 + 4) < (x + 77 * (9 * y))\n\nWe can use variables here, the expression `(4 + 4)` can be matched by a variable and `(x + 77 * (9 * y))` by another, this is shown below using the variables `a` and `b`.\n\n    not (a >= b) ===> a <  b\n\n### Match An Identifier\n\nIdentifiers in F# code can be matched by using the same identifier in the hint. It's important to note that since single characters are used to represent variables in hints the identifier must be at least 2 characters long.\n\nFor example the following rule uses identifiers:\n\n    [lang=hint]\n    List.fold (+) 0 ===> List.sum\n\n`List.fold` in the hint will match the same identifier in the code. So if `List.fold` is found anywhere in the F# code being analysed with `(+)` and `0` applied to it then the rule will be matched.\n\n### Match Literal Constants\n\nLiteral constants can be used to match literal constants in the code, the constants in hints are the same format as constants in F#, so for example if you wanted to match `0x4b` you could use `0x4b` in the hint.\n\nExample:\n\n    [lang=hint]\n    not true ===> false\n\nIn the example above the boolean literal `true` is used to match any F# code where `true` is applied to the `not` identifier.\n\n### Match Function Application and Operators\n\nMatching function application, prefix operators, and infix operators in hints are all done in the same way as how you'd write it in F# e.g.\n\n    [lang=hint]\n    not true ===> false\n    4 + 4 ===> 8\n    ~x ===> someFunc x\n\nThe first rule above matches `true` (boolean literal) applied to the function `not`, the second matches two literal integers (both `4`) applied to the `+` binary operator, and the third matches an expression applied to the `~` prefix operator.\n\nRead the below section titled \"Order Of Operations\" for specifying the order of application in a hint.\n\n### Match Lambda Functions\n\nLambda functions can be matched using the syntax `fun args -> ()` e.g. `fun x y -> x + y`.\n\nThe arguments may be either wildcards (`_`) or 'variables' (a single character). The 'variable' arguments have a particular use: they match a lambda that has that argument as an identifier, and then if that 'variable' is used in the body of the lambda in the hint then it will match the argument's identifier in the body of the code.\n\nFor example:\n\n    [lang=hint]\n    fun x -> x ===> id\n\nThe above hint will match a lambda that has a single argument which is an identifier and returns that identifier. `fun val -> val` would be matched, whereas `fun val -> ()` would not be matched - to match this you could use the hint: `fun _ -> ()`.\n\n### Order Of Operations\n\nGeneric order of operations can be specified using parentheses. They're described as 'generic' because using parentheses in a hint will also take into account the following operators: `|>`, `||>`, `|||>`, `<|`, `<||`, and `<|||` which are often used to specificy the order of function application.\n\nBelow uses parentheses to match `x` applied to `not` and the result of that application applied to `someFunc`.\n\n    [lang=hint]\n    someFunc (not x) ===> someOtherFunc x\n\nIn F# several operators are commonly used to show the order of function application, for example in F# `someFunc (not x)` could also be written as:\n\n    not x |> someFunc\n\nThe same code written as a rule `not x |> someFunc` will match the above, but it is matching against the operator so it will not match `someFunc (not x)`. However the rule `someFunc (not x)` will match both.\n\n## EBNF of a Hint\n\nThis is incomplete - currently missing a few of the more detailed rules e.g. `uint32` and `infix-operator`, for these I'd recommend looking them up in the EBNF for F# as that's what they will be based upon.\n\n    [lang=ebnf]\n    whitespace = \" \" | \"\\t\" | \"\\n\" | \"\\r\\n\" | \"\\r\";\n\n    spaces = [{whitespace}];\n\n    spaces1 = whitespace, [{whitespace}];\n\n    bool = \"true\" | \"false\";\n\n    unit = \"(\", [spaces], \")\";\n\n    constant = bool\n                | unit\n                | character\n                | literal-string\n                | verbatim-string\n                | byte-char\n                | byte-array\n                | verbatim-byte-array\n                | triple-quoted-string\n                | sbyte\n                | byte\n                | int16\n                | uint16\n                | uint32\n                | native-int\n                | unative-int\n                | int64\n                | uint64\n                | single\n                | big-num\n                | decimal\n                | double\n                | int32;\n\n    parentheses = \"(\" expression \")\";\n\n    wildcard = \"_\";\n\n    variable = letter, -letter;\n\n    ident-start-char = \"_\" | letter;\n\n    ident-char = letter | digit | \"'\" | \"_\" ;\n\n    ident-text = ident-start-char, {ident-char};\n\n    ident = ident-text | (\"``\", {(-(\"`\" | \"\\n\" | \"\\r\" | \"\\t\")) | ((\"`\"), -(\"`\" | \"\\n\" | \"\\r\" | \"\\t\"))}, \"``\");\n\n    ident-or-op = ident | (\"(\", spaces, operator, spaces, \")\");\n\n    long-ident = {ident, \".\"} | ident;\n\n    long-ident-or-op = ident, {\".\", ident}, [\".\", ident-or-op]\n                        | ident-or-op\n                        | long-ident;\n\n    application = constant\n                    | variable\n                    | wildcard\n                    | long-ident-or-op\n                    | parentheses;\n\n    function-application = long-ident-or-op, identifier, spaces, {application, spaces}, [application, spaces];\n\n    prefix-expr = prefix-operator, spaces, expression\n\n    infix-expr = expression, spaces, infix-operator, spaces, expression\n\n    identifier = long-ident-or-op -letter;\n\n    argument-variable = letter;\n\n    argument-wildcard = \"_\";\n\n    lambda-arguments = [{(argument-variable | argument-wildcard), spaces1}],\n                            (argument-variable | argument-wildcard), [spaces]\n\n    lambda = \"fun\", spaces1, lambda-arguments, \"->\", spaces, expression;\n\n    expression = spaces, (constant | lambda | variable | wildcard | function-application\n                          | identifier | parentheses | infix-expr | prefix-expr), spaces;\n\n    suggestion = expression;\n\n    match = expression;\n\n    hint = match, spaces, \"===>\", spaces, suggestion;\n\n## Writing Your Own Hints\n\nYou can add new hints to your config in the `hints` object. This config has two fields, `add` and `ignore`. `add` is used to add new hints, while `ignore` can be used to ignore hints\nadded in previous configs (e.g. the default config).\n\nFor example to make the lint tool run with just the two hints: `not (a =  b) ===> a <> b` and `not (a <> b) ===> a =  b`, and also ignore the default hint `x = true ===> x`,\nyou could use the following config file.\n\n    [lang=javascript]\n    {\n      \"hints\": {\n        \"add\": [\n          \"not (a =  b) ===> a <> b\",\n          \"not (a <> b) ===> a =  b\"\n        ],\n        \"ignore\": [ \"x = true ===> x\" ]\n      }\n    }\n\n## Flaws\n\n* `===>` is used to split the hints into parts, a hint cannot match this valid F# operator.\n* Single letter identifiers are used as variables inside a hint, so attempting to match an identifier that is a single letter is not going to work.\n* Operators beginning with `.` (e.g. `.*`) will have incorrect precedence and as such should not currently be used in hints.\n\n## Future Intentions\n\n* Provide more informative parse errors.\n* Allow for adding your own hints and removing select hints rather than always having to override the default with a set of hints.\n* Provide support for matching literal lists, literal arrays, literal sequences, tuples, methods, if statements, and match statements.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0047.html","title":"FL0047","content":"\n# MeasureTypeNames (FL0047)\n\n## Cause\n\nMeasure type naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the measure type's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"measureTypeNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0005.html","title":"FL0005","content":"\n# PatternMatchOrClausesOnNewLine (FL0005)\n\n## Cause\n\nAll pattern match \"or\" clauses should be on their own line.\n\n## Rationale\n\nReadability.\n\n## How To Fix\n\nPlace each pattern match \"or\" clause on its own line.\n\n## Rule Settings\n\n    {\n        \"patternMatchOrClausesOnNewLine\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0077.html","title":"FL0077","content":"\n# AvoidSinglePipeOperator (FL0077)\n\n*Introduced in `0.21.5`*\n\n## Cause\n\nUse of the pipe operator when only one invocation is employed.\n\n## Rationale\n\nWhen the use of the pipe operator happens for a single invocation (instead of a multiple one, which would add a chain of them, usually staggered across \nmany lines), it doesn't aid readibility.\n\nExample of single pipe operator usage:\n\n```fsharp\nlet someFunc someParam =\n    someParam\n    |> someOtherFunc\n```\n\nExample of multiple pipe operator usage:\n\n```fsharp\nlet someFunc someParam =\n    someParam\n    |> someOtherFunc\n    |> yetAnotherFunc\n```\n\n## How To Fix\n\nJust use a normal function call, without the need for any operator:\n\n```fsharp\nlet someFunc someParam =\n    someOtherFunc someParam\n```\n\n## Rule Settings\n\n    {\n        \"avoidSinglePipeOperator\": { \"enabled\": false }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0002.html","title":"FL0002","content":"\n# TupleIndentation (FL0002)\n\n## Cause\n\nTuples which span several lines should have consistent indentation.\n\n## Rationale\n\nConsistent indentation provides better readability.\n\n## How To Fix\n\nFix tuple indentation.\n\n## Rule Settings\n\n    {\n        \"tupleIndentation\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0016.html","title":"FL0016","content":"\n# FailwithWithSingleArgument (FL0016)\n\n## Cause\n\n`failwith` is passed more than one argument e.g. `failwith \"Divisor cannot be zero.\" 5`\n\n## Rationale\n\n`failwith` being passed more than one argument (the error message) is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"failwithWithSingleArgument\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0044.html","title":"FL0044","content":"\n# NamespaceNames (FL0044)\n\n## Cause\n\nNamespace naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the namespace's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"namespaceNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0006.html","title":"FL0006","content":"\n# PatternMatchClauseIndentation (FL0006)\n\n## Cause\n\nAll pattern match clauses should be at the same indentation level.\n\n## Rationale\n\nReadability.\n\n## How To Fix\n\nUpdate pattern match clauses to have consistent indentation.\n\n## Rule Settings\n\nUses the `numIndentationSpaces` global setting.\n\n    {\n        \"patternMatchClauseIndentation\": {\n            \"enabled\": false,\n            \"config\": {\n              \"allowSingleLineLambda\": false\n            }\n        }\n    }\n\n* *allowSingleLineLambda* - whether or not to allow single-line lambda pattern matches\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0062.html","title":"FL0062","content":"\n# MaxLinesInFile (FL0062)\n\n## Cause\n\nMore than a configurable number of lines were found in a file.\n\n## Rationale\n\nToo many lines in a file indicate it's becoming too complex.\n\n## How To Fix\n\nRefactor to extract code out into another file.\n\n## Rule Settings\n\n    {\n        \"maxLinesInFile\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLinesInFile\": 1000\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0033.html","title":"FL0033","content":"\n# MaxLinesInClass (FL0033)\n\n## Cause\n\nA class is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a class becomes the more complex it becomes, it also indicates that it may have [too many different responsibilities](http://en.wikipedia.org/wiki/Single_responsibility_principle).\n\n## How To Fix\n\nExtract code out into smaller composable classes.\n\n## Rule Settings\n\n    {\n        \"maxLinesInClass\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 500\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0040.html","title":"FL0040","content":"\n# EnumCasesNames (FL0040)\n\n## Cause\n\nEnum case naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the enum case's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"enumCasesNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0046.html","title":"FL0046","content":"\n# ParameterNames (FL0046)\n\n## Cause\n\nParameter naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the parameter's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"parameterNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"CamelCase\",\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0003.html","title":"FL0002","content":"\n# TupleParentheses (FL0003)\n\n## Cause\n\nMissing parentheses around tuple instantiation.\n\n## Rationale\n\nRecommended by [Microsoft F# code formatting guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#formatting-tuples).\n\n## How To Fix\n\nAdd parentheses around tuple instantiation.\n\n## Rule Settings\n\n    {\n        \"tupleParentheses\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0076.html","title":"FL0076","content":"\n# FavourStaticEmptyFields (FL0076)\n\n*Introduced in `0.21.3`*\n\n## Cause\n\nUse of immediate string \"\", empty list [] or empty array [||].\n\n## Rationale\n\nUsing static empty fields aids readibility.\n\n## How To Fix\n\nUse a static empty field such as String.Empty, List.Empty or Array.empty.\n\n## Rule Settings\n\n    {\n        \"favourStaticEmptyFields\": { \"enabled\": false }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0071.html","title":"FL0071","content":"\n# CyclomaticComplexity (FL0071)\n\n*Reintroduced in `0.20.2`*\n\n## Cause\n\nThe cyclomatic complexity of a function or method exceeds the configured maximum complexity threshold.\n\n## Rationale\n\nCyclomatic complexity provides the number of linearly independent paths through a function or method. Metricating cyclomatic complexity is a requirement for many software product assurance activities prescribed in industry.\n\n## How To Fix\n\nThe cyclomatic complexity of a function or method is incremented by the following contributors:\n* conditional branching (`if`/`else`/`elif`)\n* `match` cases (also applies to `function` pattern matching and `match!`)\n* `for` (for...in) and `foreach` (for i in...to) expressions\n* `while` expressions\n* boolean operators within conditional expressions of the above, or within `when` expressions in the case of `match`\n\nReducing the cyclomatic complexity of a function typically involves decomposing the function into more sub-functions. The cyclomatic complexity calculated by this rule is limited to a single scope of a function or method, i.e. the cyclomatic complexity of a function `g` nested within function `f` is calculated independent of the complexity of `f` and will not contribute to the cyclomatic copmlexity of `f`.\n\n## Rule Settings\n\nThere is a single setting applicable to the cyclomatic complexity, which is the maximum cyclomatic complexity.  \n\n    {\n        \"enabled\": true,\n        \"config\": {\n            \"maxComplexity\": 40\n        }\n    }\n   \n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0081.html","title":"FL0081","content":"\n# NestedFunctionNames (FL0081)\n\n*Introduced in `0.21.8`*\n\n## Cause\n\nNested function naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the nested function names to be consistent with the rules you have specified.\n\n## Rule Settings\n\n    {\n        \"NestedFunctionNames\": {\n            \"enabled\": false,\n            \"config\": {\n                \"naming\": \"CamelCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0036.html","title":"FL0036","content":"\n# InterfaceNames (FL0036)\n\n## Cause\n\nInterface naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the interface's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"interfaceNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\",\n                \"prefix\": \"I\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0001.html","title":"FL0001","content":"\n# TupleCommaSpacing (FL0001)\n\n## Cause\n\nSpace missing after tuple comma.\n\n## Rationale\n\nFor readability, it helps to include a space after tuple commas.\n\n## How To Fix\n\nAdd a space after tuple commas.\n\n## Rule Settings\n\n    {\n        \"tupleCommaSpacing\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0082.html","title":"FL0082","content":"\n# UsedUnderscorePrefixedElements (FL0082)\n\n*Introduced in `0.23.0`*\n\n## Cause\n\nAn underscore-prefixed element is being used.\n\n## Rationale\n\nUnderscore (_) or underscore-prefixed elements are normally used for things that are not being used.\n\n## How To Fix\n\nRemove the underscore prefix or avoid using that element in the code.\n\n## Rule Settings\n\n    {\n        \"usedUnderscorePrefixedElements\": {\n            \"enabled\": true\n        }\n    }\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0017.html","title":"FL0017","content":"\n# RaiseWithSingleArgument (FL0017)\n\n## Cause\n\n`raise` is passed more than one argument e.g. `raise (System.ArgumentException(\"Divisor cannot be zero.\")) 5`\n\n## Rationale\n\n`raise` being passed more than one argument (the exception to be thrown) is probably a mistake.\n\n## How To Fix\n\nRemove the extra arguments.\n\n## Rule Settings\n\n    {\n        \"raiseWithSingleArgument\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0079.html","title":"FL0079","content":"\n# SuggestUseAutoProperty (FL0079)\n\n*Introduced in `0.21.7`*\n\n## Cause\n\nSuggest usage of auto-property (`member val Foo`) when `member self.Foo` is unnecessary.\n\n## Rationale\n\nCleaner code.\n\n## How To Fix\n\nUse auto-property (`member val`) for properties that only return immutable value.\n\n## Rule Settings\n\n    {\n        \"suggestUseAutoProperty\": { \"enabled\": false }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0069.html","title":"FL0069","content":"\n# GenericTypesNames (FL0069)\n\n*Introduced in `0.21.1`*\n\n## Cause\n\nGeneric type naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the generic type naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"genericTypesNames\": {\n           \"enabled\": true,\n           \"config\": {\n               \"naming\": \"PascalCase\",\n               \"underscores\": \"None\"\n           }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0028.html","title":"FL0028","content":"\n# MaxLinesInProperty (FL0028)\n\n## Cause\n\nA property is made up of more than a configurable number of lines.\n\n## Rationale\n\nThe larger a property becomes the more complex it becomes, it also indicates that it may have too many different responsibilities.\n\n## How To Fix\n\nExtract code out into private methods or functions.\n\n## Rule Settings\n\n    {\n        \"MaxLinesInProperty\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxLines\": 70\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0049.html","title":"FL0049","content":"\n# PublicValuesNames (FL0049)\n\n## Cause\n\nPublic value naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the public value's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"publicValuesNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"underscores\": \"AllowPrefix\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0054.html","title":"FL0054","content":"\n# MaxNumberOfBooleanOperatorsInCondition (FL0054)\n\n## Cause\n\nA `while/if/assert/match when` condition contains more than a configurable number of boolean operators, for example if `maxItems` was set to 4 (the default value)\nthen the following condition would cause the error: `if x && y || q || r && t && w then`\n\n## Rationale\n\nCan make the control flow become diffcult to understand.\n\n## How To Fix\n\nReduce the number of boolean operators in the `while/if/assert/match when` condition, e.g. a simple way to fix the example in the \"Cause\" section you could name the expression:\n\n    let catIsInBin = x && y || q || r && t && w\n    if catIsInBin then\n\n## Rule Settings\n\n    {\n        \"maxNumberOfBooleanOperatorsInCondition\": {\n            \"enabled\": false,\n            \"config\": {\n                \"maxItems\": 4\n            }\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0008.html","title":"FL0008","content":"\n# ModuleDeclSpacing (FL0008)\n\n## Cause\n\nUnexpected number of spaces between declarations within module (1 space is expected).\n\n## Rationale\n\nRecommended by [Microsoft F# code formatting guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#formatting-blank-lines).\n\n## How To Fix\n\nUse 1 space between module declarations.\n\n## Rule Settings\n\n    {\n        \"moduleDeclSpacing\": {\n            \"enabled\": false\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0038.html","title":"FL0038","content":"\n# TypeNames (FL0038)\n\n## Cause\n\nType naming does not match the specified config.\n\n## Rationale\n\nConsistency aides readability.\n\n## How To Fix\n\nUpdate the type's naming to be consistent with the rules you have specified\n\n## Rule Settings\n\nNote, any of the settings below can be omitted and will not be checked.\n\n    {\n        \"typeNames\": {\n            \"enabled\": true,\n            \"config\": {\n                \"naming\": \"PascalCase\",\n                \"underscores\": \"None\"\n            }\n        }\n    }\n\n* *naming* - expected casing of the identifiers (\"PascalCase\" or \"CamelCase\")\n* *underscores* - if underscores are allowed in the identifiers (\"AllowPrefix\", \"AllowAny\", or \"None\")\n* *prefix* - prefix string expected on the front of the identifiers.\n* *suffix* - suffix string expected on the end of the identifiers.\n"},{"uri":"https://fsprojects.github.io/FSharpLint/how-tos/rules/FL0063.html","title":"FL0063","content":"\n# TrailingNewLineInFile (FL0063)\n\n## Cause\n\nA new line was found at the end of a file.\n\n## Rationale\n\nPointless whitespace.\n\n## How To Fix\n\nRemove any new lines at the end of a file.\n\n## Rule Settings\n\n    {\n        \"trailingNewLineInFile\": {\n            \"enabled\": true\n        }\n    }\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/index.html","title":"FSharpLint.Core - API Reference","content":"FSharpLint.Core \n FSharpLint.Application FSharpLint.Core FSharpLint.Framework FSharpLint.Rules FSharpLint.Rules.Helper"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-application-configurationmanagement.html","title":"ConfigurationManagement","content":"ConfigurationManagement \n <p>Provides an API to manage/load FSharpLint configuration files.\n<see cref=\"FSharpLint.Framework.Configuration\" /> for more information on\nthe default configuration and overriding configurations.</p>\n\n \n  \n  \n loadConfigurationFile <p>Load a FSharpLint configuration file from the contents (string) of the file.</p>\n\n \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-application-lint.html","title":"Lint","content":"Lint \n <p>Provides an API for running FSharpLint from within another application.</p>\n\n \n  \n BuildFailure  ConfigurationParam  Context  LintFailure <p>Reason for the linter failing.</p>\n\n LintResult <p>Result of running the linter.</p>\n\n OptionalLintParameters <p>Optional parameters that can be provided to the linter.</p>\n\n ParsedFileInformation <p>If your application has already parsed the F# source files using <code>FSharp.Compiler.Services</code>\nyou want to lint then this can be used to provide the parsed information to prevent the\nlinter from parsing the file again.</p>\n\n ProjectProgress <p>Provides information on what the linter is currently doing.</p>\n\n \n runAstNodeRules <p>Runs all rules which take a node of the AST as input.</p>\n\n runLineRules <p>Runs all rules which take a line of text as input.</p>\n\n lintSolution <p>Lints an entire F# solution by linting all projects specified in the <code>.sln</code> file.</p>\n\n lintProject <p>Lints an entire F# project by retrieving the files from a given\npath to the <code>.fsproj</code> file.</p>\n\n lintSource <p>Lints F# source code.</p>\n\n lintParsedSource <p>Lints F# source code that has already been parsed using\n<code>FSharp.Compiler.Services</code> in the calling application.</p>\n\n lintFile <p>Lints an F# file from a given path to the <code>.fs</code> file.</p>\n\n lintParsedFile <p>Lints an F# file that has already been parsed using\n<code>FSharp.Compiler.Services</code> in the calling application.</p>\n\n \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-core-assemblyinfo.html","title":"AssemblyInfo","content":"AssemblyInfo \n  \n  \n  \n  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-core-prelude.html","title":"Prelude","content":"Prelude \n  \n Async  \n  \n  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-core-prelude-async.html","title":"Async","content":"Async \n  \n  \n  \n combine  map  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-abstractsyntaxarray.html","title":"AbstractSyntaxArray","content":"AbstractSyntaxArray \n  \n  \n CurrentNode <p>Contains information on the current node being visited.</p>\n\n Node  SyntaxNode  \n astToArray  getBreadcrumbs  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-ast.html","title":"Ast","content":"Ast \n <p>Used to walk the FSharp Compiler's abstract syntax tree,\nso that each node can be visited by a list of visitors.</p>\n\n \n List  \n AstNode <p>Nodes in the AST to be visited.</p>\n\n Lambda  \n extractAttributes <p>Concatenates the nested-list structure of <code>SynAttributes</code> into a <code>SynAttribute list</code> to keep other code\nmostly unchanged.</p>\n\n removeParens <p>Extracts an expression from parentheses e.g. ((x + 4)) -&gt; x + 4</p>\n\n extractPatterns <p>Concatenates the typed-or-untyped structure of <code>SynSimplePats</code> into a <code>SynSimplePat list</code> to keep other code\nmostly unchanged.</p>\n\n traverseNode <p>Extracts the child nodes to be visited from a given node.</p>\n\n \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-ast-list.html","title":"List","content":"List \n  \n  \n  \n revIter  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-astinfo.html","title":"AstInfo","content":"AstInfo \n  \n  \n IdentifierType  \n identifierTypeFromValData  operatorIdentifiers  operators <p>Operator identifiers can be made up of \"op_\" followed by a sequence of operators from this list.</p>\n\n isSequenceOfOperators  isOperator <p>Is an identifier an operator overload?</p>\n\n \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration.html","title":"Configuration","content":"Configuration \n <p>Loads configuration file from JSON into an object.</p>\n\n \n FSharpJsonConverter  IgnoreFiles  \n BindingConfig  Configuration  ConfigurationException  ConventionsConfig  EnabledConfig  FormattingConfig  GlobalConfig  HintConfig  LineRules  LoadedRules  NamesConfig  NumberOfItemsConfig  PatternMatchFormattingConfig  RaiseWithTooManyArgsConfig  RuleConfig<'Config>  SourceLengthConfig  TupleFormattingConfig  TypographyConfig  \n SettingsFileName  constructRuleIfEnabled  constructRuleWithConfig  constructTypePrefixingRuleWithConfig  parseConfig <p>Tries to parse the provided config text.</p>\n\n loadConfig <p>Tries to parse the config file at the provided path.</p>\n\n defaultConfiguration <p>A default configuration specifying every analyser and rule is included as a resource file in the framework.\nThis function loads and returns this default configuration.</p>\n\n getGlobalConfig  flattenConfig  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-fsharpjsonconverter.html","title":"FSharpJsonConverter","content":"FSharpJsonConverter \n  \n  \n OptionConverter  \n serializerSettings  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-ignorefiles.html","title":"IgnoreFiles","content":"IgnoreFiles \n  \n  \n Ignore  IsDirectory  \n parseIgnorePath  shouldFileBeIgnored  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-dictionary.html","title":"Dictionary","content":"Dictionary \n  \n  \n  \n addOrUpdate  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-expressionutilities.html","title":"ExpressionUtilities","content":"ExpressionUtilities \n  \n  \n  \n getSymbolFromIdent  identAsDecompiledOpName <p>Converts an operator name e.g. op_Add to the operator symbol e.g. +</p>\n\n identAsCompiledOpName  removeParens <p>Extracts an expression from parentheses e.g. ((x + 4)) -&gt; x + 4</p>\n\n findPos <p>Finds index of a given (line number, column) position in a string.</p>\n\n longIdentToString <p>Converts a LongIdent to a String.</p>\n\n longIdentWithDotsToString <p>Converts a LongIdentWithDots to a String.</p>\n\n tryFindTextOfRange <p>Tries to find the source code within a given range.</p>\n\n getLeadingSpaces  synTypeToString <p>Converts a SynType to its string representation.</p>\n\n typeArgsToString <p>Converts a list of type args to its string representation.</p>\n\n countPrecedingCommentLines <p>Counts the number of comment lines preceding the given range of text.</p>\n\n rangeContainsOtherRange  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser.html","title":"HintParser","content":"HintParser \n  \n CommonParsers  Constants  Expressions  Identifiers <p>Need to change isLetter so that it's using unicode character classes.</p>\n\n MergeSyntaxTrees <p>Provides a way of creating a single list from any number of hint ASTs.\nMeans we can simply iterate over a single list for each node in the F# tree\nwhen matching hints rather than check each hint AST for each node.</p>\n\n NumericLiterals <p>Not supporting hex single and hex float right now.\nDecimal float currently will lose precision.</p>\n\n Operators  Patterns  StringAndCharacterLiterals  \n Constant  Expression  Hint  HintNode  LambdaArg  LambdaBody  Pattern  Suggestion  \n charListToString  pischar  pnotchar  pexpressionbasedhint  ppatternbasedhint  phint  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-commonparsers.html","title":"CommonParsers","content":"CommonParsers \n  \n  \n  \n pvariable  ptuple  plist  parray  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-constants.html","title":"Constants","content":"Constants \n  \n  \n  \n pconstant  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-expressions.html","title":"Expressions","content":"Expressions \n  \n  \n  \n pwildcard  pvariable  pargumentvariable  plambdaarguments  pexpression  pparentheses  pif  plambda  ptuple  plist  parray  papplication  pfunctionapplication  opp  prefixoperatorterm  validBangPrefixedOperatorChars  addInfixOperator  addPrefixOperator  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-identifiers.html","title":"Identifiers","content":"Identifiers \n <p>Need to change isLetter so that it's using unicode character classes.</p>\n\n \n  \n  \n plongidentorop  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-mergesyntaxtrees.html","title":"MergeSyntaxTrees","content":"MergeSyntaxTrees \n <p>Provides a way of creating a single list from any number of hint ASTs.\nMeans we can simply iterate over a single list for each node in the F# tree\nwhen matching hints rather than check each hint AST for each node.</p>\n\n \n  \n Edges  Node  SyntaxHintNode  \n isAnyMatch  getHints  mergeHints  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-numericliterals.html","title":"NumericLiterals","content":"NumericLiterals \n <p>Not supporting hex single and hex float right now.\nDecimal float currently will lose precision.</p>\n\n \n  \n  \n psbyte  pbyte  pint16  puint16  puint32  pnativeint  punativeint  pint64  puint64  psingle  pint32  pdouble  pbignum  pdecimal  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-operators.html","title":"Operators","content":"Operators \n  \n  \n  \n pfirstopchar  opchars  poperator  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-patterns.html","title":"Patterns","content":"Patterns \n  \n  \n  \n ppattern  pwildcard  pparentheses  opp  addInfixOperator  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-stringandcharacterliterals.html","title":"StringAndCharacterLiterals","content":"StringAndCharacterLiterals \n  \n  \n  \n pcharacter  pliteralstring  pverbatimstring  pbytechar  pbytearray  pverbatimbytearray  ptriplequotedstring  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-parsefile.html","title":"ParseFile","content":"ParseFile \n <p>Provides functionality to parse F# files using <code>FSharp.Compiler.Service</code>.</p>\n\n \n  \n FileParseInfo <p>Information for a file to be linted that is given to the analysers.</p>\n\n ParseFileFailure  ParseFileResult<'T>  \n getProjectOptionsFromScript  parseFile <p>Parses a file using <code>FSharp.Compiler.Service</code>.</p>\n\n parseSourceFile <p>Parses source code using <code>FSharp.Compiler.Service</code>.</p>\n\n parseSource  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules.html","title":"Rules","content":"Rules \n  \n  \n AstNodeRuleConfig  AstNodeRuleParams  GlobalRuleConfig  IndentationRuleConfig  LineRuleConfig  LineRuleConfigWithContext<'Context>  LineRuleParams  NamingCase  NamingConfig  NamingRuleConfig  NamingUnderscores  NoTabCharactersRuleConfig  Rule  RuleMetadata<'Config>  \n toWarning  runAstNodeRule  runLineRuleWithContext  runLineRule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-string.html","title":"String","content":"String \n  \n  \n  \n toLines  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-suggestion.html","title":"Suggestion","content":"Suggestion \n  \n  \n LintWarning <p>A lint \"warning\", sources the location of the warning with a suggestion on how it may be fixed.</p>\n\n SuggestedFix <p>Information for consuming applications to provide an automated fix for a lint suggestion.</p>\n\n WarningDetails  \n  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-suppression.html","title":"Suppression","content":"Suppression \n  \n  \n LineSuppression <p>Specifies the suppressions for an individual line.</p>\n\n SuppressionInfo <p>Represents rule suppression information.</p>\n\n \n parseSuppressionInfo <p>Parses a given file to find lines containing rule suppressions.</p>\n\n isSuppressed <p>Check if a rule is suppressed for a given line.\nGiven line suppressions must be in order by line - see parseSuppressionInfo.</p>\n\n \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-utilities.html","title":"Utilities","content":"Utilities \n  \n  \n  \n hash2 <p>Fast hash of two objects without having to allocate\n(e.g. a common approach would be to take the hash code of a tuple of the two objects).</p>\n\n ( </> )  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-activepatternnames.html","title":"ActivePatternNames","content":"ActivePatternNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-asyncexceptionwithoutreturn.html","title":"AsyncExceptionWithoutReturn","content":"AsyncExceptionWithoutReturn \n  \n  \n  \n checkExpression  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-avoidsinglepipeoperator.html","title":"AvoidSinglePipeOperator","content":"AvoidSinglePipeOperator \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-avoidtooshortnames.html","title":"AvoidTooShortNames","content":"AvoidTooShortNames \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-canbereplacedwithcomposition.html","title":"CanBeReplacedWithComposition","content":"CanBeReplacedWithComposition \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-classmemberspacing.html","title":"ClassMemberSpacing","content":"ClassMemberSpacing \n  \n  \n  \n checkClassMemberSpacing  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-cyclomaticcomplexity.html","title":"CyclomaticComplexity","content":"CyclomaticComplexity \n  \n  \n Config <p>Configuration of the cyclomatic complexity (FL0069) rule.</p>\n\n \n runner <p>Runner for the rule.</p>\n\n cleanup <p>Resets call stack after a call to runner.</p>\n\n rule <p>Generator function for a rule instance.</p>\n\n \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-enumcasesnames.html","title":"EnumCasesNames","content":"EnumCasesNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-exceptionnames.html","title":"ExceptionNames","content":"ExceptionNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-failwithbadusage.html","title":"FailwithBadUsage","content":"FailwithBadUsage \n  \n  \n Location  \n failwithMessages  cleanup  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-failwithwithsingleargument.html","title":"FailwithWithSingleArgument","content":"FailwithWithSingleArgument \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-failwithfwithargumentsmatchingformatstring.html","title":"FailwithfWithArgumentsMatchingFormatString","content":"FailwithfWithArgumentsMatchingFormatString \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-favourconsistentthis.html","title":"FavourConsistentThis","content":"FavourConsistentThis \n  \n  \n Config <p>Configuration of the favour consistent 'this' (FL0074) rule.</p>\n\n \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-favourignoreoverletwild.html","title":"FavourIgnoreOverLetWild","content":"FavourIgnoreOverLetWild \n  \n  \n  \n rule <p>Checks if any code uses 'let _ = ...' and suggests to use the ignore function.</p>\n\n \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-favourreraise.html","title":"FavourReRaise","content":"FavourReRaise \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-favourstaticemptyfields.html","title":"FavourStaticEmptyFields","content":"FavourStaticEmptyFields \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-favourtypedignore.html","title":"FavourTypedIgnore","content":"FavourTypedIgnore \n  \n  \n  \n rule <p>Checks if any code uses untyped ignore</p>\n\n \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-generictypesnames.html","title":"GenericTypesNames","content":"GenericTypesNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-hintmatcher.html","title":"HintMatcher","content":"HintMatcher \n  \n  \n Config  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-identifiers.html","title":"Identifiers","content":"Identifiers \n  \n  \n  \n identifier  TupleCommaSpacing  TupleIndentation  TupleParentheses  PatternMatchClausesOnNewLine  PatternMatchOrClausesOnNewLine  PatternMatchClauseIndentation  PatternMatchExpressionIndentation  ModuleDeclSpacing  ClassMemberSpacing  TypedItemSpacing  TypePrefixing  UnionDefinitionIndentation  RecursiveAsyncFunction  RedundantNewKeyword  NestedStatements  FailwithWithSingleArgument  RaiseWithSingleArgument  NullArgWithSingleArgument  InvalidOpWithSingleArgument  InvalidArgWithTwoArguments  FailwithfWithArgumentsMatchingFormattingString  MaxLinesInLambdaFunction  MaxLinesInMatchLambdaFunction  MaxLinesInValue  MaxLinesInFunction  MaxLinesInMember  MaxLinesInConstructor  MaxLinesInProperty  MaxLinesInModule  MaxLinesInRecord  MaxLinesInEnum  MaxLinesInUnion  MaxLinesInClass  ReimplementsFunction  CanBeReplacedWithComposition  InterfaceNames  ExceptionNames  TypeNames  RecordFieldNames  EnumCasesNames  UnionCasesNames  ModuleNames  LiteralNames  NamespaceNames  MemberNames  ParameterNames  MeasureTypeNames  ActivePatternNames  PublicValuesNames  MaxNumberOfItemsInTuple  MaxNumberOfFunctionParameters  MaxNumberOfMembers  MaxNumberOfBooleanOperatorsInCondition  FavourIgnoreOverLetWild  WildcardNamedWithAsPattern  UselessBinding  TupleOfWildcards  Indentation  MaxCharactersOnLine  TrailingWhitespaceOnLine  MaxLinesInFile  TrailingNewLineInFile  NoTabCharacters  Hints  NoPartialFunctions  PrivateValuesNames  InternalValuesNames  GenericTypesNames  FavourTypedIgnore  CyclomaticComplexity  FailwithBadUsage  FavourReRaise  FavourConsistentThis  AvoidTooShortNames  FavourStaticEmptyFields  AvoidSinglePipeOperator  AsyncExceptionWithoutReturn  SuggestUseAutoProperty  UnnestedFunctionNames  NestedFunctionNames  UsedUnderscorePrefixedElements  UnneededRecKeyword  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-indentation.html","title":"Indentation","content":"Indentation \n  \n ContextBuilder  \n  \n RuleName  checkIndentation  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-indentation-contextbuilder.html","title":"ContextBuilder","content":"ContextBuilder \n  \n  \n  \n builder  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-interfacenames.html","title":"InterfaceNames","content":"InterfaceNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-internalvaluesnames.html","title":"InternalValuesNames","content":"InternalValuesNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-invalidargwithtwoarguments.html","title":"InvalidArgWithTwoArguments","content":"InvalidArgWithTwoArguments \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-invalidopwithsingleargument.html","title":"InvalidOpWithSingleArgument","content":"InvalidOpWithSingleArgument \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-literalnames.html","title":"LiteralNames","content":"LiteralNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxcharactersonline.html","title":"MaxCharactersOnLine","content":"MaxCharactersOnLine \n  \n  \n Config  \n checkMaxCharactersOnLine  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinclass.html","title":"MaxLinesInClass","content":"MaxLinesInClass \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinconstructor.html","title":"MaxLinesInConstructor","content":"MaxLinesInConstructor \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinenum.html","title":"MaxLinesInEnum","content":"MaxLinesInEnum \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinfile.html","title":"MaxLinesInFile","content":"MaxLinesInFile \n  \n  \n Config  \n checkMaxLinesInFile  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinfunction.html","title":"MaxLinesInFunction","content":"MaxLinesInFunction \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinlambdafunction.html","title":"MaxLinesInLambdaFunction","content":"MaxLinesInLambdaFunction \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinmatchlambdafunction.html","title":"MaxLinesInMatchLambdaFunction","content":"MaxLinesInMatchLambdaFunction \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinmember.html","title":"MaxLinesInMember","content":"MaxLinesInMember \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinmodule.html","title":"MaxLinesInModule","content":"MaxLinesInModule \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinproperty.html","title":"MaxLinesInProperty","content":"MaxLinesInProperty \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinrecord.html","title":"MaxLinesInRecord","content":"MaxLinesInRecord \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinunion.html","title":"MaxLinesInUnion","content":"MaxLinesInUnion \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinvalue.html","title":"MaxLinesInValue","content":"MaxLinesInValue \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxnumberofbooleanoperatorsincondition.html","title":"MaxNumberOfBooleanOperatorsInCondition","content":"MaxNumberOfBooleanOperatorsInCondition \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxnumberoffunctionparameters.html","title":"MaxNumberOfFunctionParameters","content":"MaxNumberOfFunctionParameters \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxnumberofitemsintuple.html","title":"MaxNumberOfItemsInTuple","content":"MaxNumberOfItemsInTuple \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxnumberofmembers.html","title":"MaxNumberOfMembers","content":"MaxNumberOfMembers \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-measuretypenames.html","title":"MeasureTypeNames","content":"MeasureTypeNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-membernames.html","title":"MemberNames","content":"MemberNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-moduledeclspacing.html","title":"ModuleDeclSpacing","content":"ModuleDeclSpacing \n  \n  \n  \n checkModuleDeclSpacing  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-modulenames.html","title":"ModuleNames","content":"ModuleNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-namespacenames.html","title":"NamespaceNames","content":"NamespaceNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-nestedfunctionnames.html","title":"NestedFunctionNames","content":"NestedFunctionNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-nestedstatements.html","title":"NestedStatements","content":"NestedStatements \n  \n  \n Config  \n isMetaData <p>Is node a duplicate of a node in the AST containing ExtraSyntaxInfo\ne.g. lambda arg being a duplicate of the lambda.</p>\n\n isElseIf  depth  decrementDepthToCommonParent  skipToIndex  runner  cleanup  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-nopartialfunctions.html","title":"NoPartialFunctions","content":"NoPartialFunctions \n  \n  \n Config  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-notabcharacters.html","title":"NoTabCharacters","content":"NoTabCharacters \n  \n ContextBuilder  \n  \n checkNoTabCharacters  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-notabcharacters-contextbuilder.html","title":"ContextBuilder","content":"ContextBuilder \n  \n  \n  \n builder  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-nullargwithsingleargument.html","title":"NullArgWithSingleArgument","content":"NullArgWithSingleArgument \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-parameternames.html","title":"ParameterNames","content":"ParameterNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-patternmatchclauseindentation.html","title":"PatternMatchClauseIndentation","content":"PatternMatchClauseIndentation \n  \n  \n Config  \n check  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-patternmatchclausesonnewline.html","title":"PatternMatchClausesOnNewLine","content":"PatternMatchClausesOnNewLine \n  \n  \n  \n check  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-patternmatchexpressionindentation.html","title":"PatternMatchExpressionIndentation","content":"PatternMatchExpressionIndentation \n  \n  \n  \n check  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-patternmatchorclausesonnewline.html","title":"PatternMatchOrClausesOnNewLine","content":"PatternMatchOrClausesOnNewLine \n  \n  \n  \n check  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-privatevaluesnames.html","title":"PrivateValuesNames","content":"PrivateValuesNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-publicvaluesnames.html","title":"PublicValuesNames","content":"PublicValuesNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-raisewithsingleargument.html","title":"RaiseWithSingleArgument","content":"RaiseWithSingleArgument \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-recordfieldnames.html","title":"RecordFieldNames","content":"RecordFieldNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-recursiveasyncfunction.html","title":"RecursiveAsyncFunction","content":"RecursiveAsyncFunction \n  \n  \n  \n checkRecursiveAsyncFunction  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-redundantnewkeyword.html","title":"RedundantNewKeyword","content":"RedundantNewKeyword \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-reimplementsfunction.html","title":"ReimplementsFunction","content":"ReimplementsFunction \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-suggestuseautoproperty.html","title":"SuggestUseAutoProperty","content":"SuggestUseAutoProperty \n  \n  \n  \n isImmutableSequentialExpression  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-trailingnewlineinfile.html","title":"TrailingNewLineInFile","content":"TrailingNewLineInFile \n  \n  \n  \n checkTrailingNewLineInFile  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-trailingwhitespaceonline.html","title":"TrailingWhitespaceOnLine","content":"TrailingWhitespaceOnLine \n  \n  \n Config  \n checkTrailingWhitespaceOnLine  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-tuplecommaspacing.html","title":"TupleCommaSpacing","content":"TupleCommaSpacing \n  \n  \n  \n checkTupleCommaSpacing  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-tupleindentation.html","title":"TupleIndentation","content":"TupleIndentation \n  \n  \n  \n checkTupleIndentation  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-tupleofwildcards.html","title":"TupleOfWildcards","content":"TupleOfWildcards \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-tupleparentheses.html","title":"TupleParentheses","content":"TupleParentheses \n  \n  \n  \n checkTupleHasParentheses  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-typenames.html","title":"TypeNames","content":"TypeNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-typeprefixing.html","title":"TypePrefixing","content":"TypePrefixing \n  \n  \n Config  Mode  \n checkTypePrefixing  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-typeditemspacing.html","title":"TypedItemSpacing","content":"TypedItemSpacing \n  \n  \n Config  TypedItemStyle  \n runner <p>Checks for correct spacing around colon of a typed item.</p>\n\n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-unioncasesnames.html","title":"UnionCasesNames","content":"UnionCasesNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-uniondefinitionindentation.html","title":"UnionDefinitionIndentation","content":"UnionDefinitionIndentation \n  \n  \n  \n getUnionCaseStartColumn  checkUnionDefinitionIndentation  runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-unneededreckeyword.html","title":"UnneededRecKeyword","content":"UnneededRecKeyword \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-unnestedfunctionnames.html","title":"UnnestedFunctionNames","content":"UnnestedFunctionNames \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-usedunderscoreprefixedelements.html","title":"UsedUnderscorePrefixedElements","content":"UsedUnderscorePrefixedElements \n  \n  \n  \n runner  rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-uselessbinding.html","title":"UselessBinding","content":"UselessBinding \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-wildcardnamedwithaspattern.html","title":"WildcardNamedWithAsPattern","content":"WildcardNamedWithAsPattern \n  \n  \n  \n rule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-binding.html","title":"Binding","content":"Binding \n  \n  \n  \n isLetBinding  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-functionreimplementation.html","title":"FunctionReimplementation","content":"FunctionReimplementation \n  \n  \n  \n getLambdaParamIdent  checkLambda  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-hints.html","title":"Hints","content":"Hints \n <p>Matching hints is done in two passes: fuzzy match, and an untyped ast match.\nThe untyped ast match attempts to match a single hint against a given node in the ast,\nto avoid attempting every hint against every node, an initial pass (the fuzzy match) is done\nto eliminate as many cases where there'll never be a match as quickly as possible, so that the\nast match is run against as few hints and ast nodes as possible.</p>\n<p>The fuzzy match requires two structures to be computed before hand: an abstract syntax array\nconstructed from the ast, and a trie of hints. Both of these structures contain hash codes of the\nnodes, the hash codes are expected to match when the nodes are equivalent. The matching is done using these\nhash codes so we end up with a trie of integers searching against an array of integers -\nwhich is pretty fast.</p>\n\n \n  \n  \n checkTrie <p>Compares the hint trie against a given location in the abstract syntax array.</p>\n\n \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-naming.html","title":"Naming","content":"Naming \n  \n QuickFixes  \n AccessControlLevel <p>Specifies access control level as described in\n<a href=\"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/access-control\">https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/access-control</a> .\nHigher levels also include lower levels, so e.g. identifier marked with Public\nis also accessible in Internal and Private scopes.\nPublic scope is the widest, then goes Internal, then Private.</p>\n\n GetIdents<'T>  \n isPascalCase  isCamelCase  toAstNodeRule  isActivePattern  activePatternIdentifiers  getAccessControlLevel  isAttribute <p>Is an attribute with a given name?\ne.g. check for Literal attribute.</p>\n\n isLiteral  isExtern  isMeasureType  isNotUnionCase  isInterface  checkAccessibility  isModule  isImplicitModule <p>Is module name implicitly created from file name?</p>\n\n getPatternIdents <p>Recursively get all identifiers from pattern using provided getIdents function and collect them into array.\naccessibility parameter is passed to getIdents, and can be narrowed down along the way (see checkAccessibility).</p>\n\n identFromSimplePat  isNested  getFunctionIdents  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-naming-quickfixes.html","title":"QuickFixes","content":"QuickFixes \n  \n  \n  \n removeAllUnderscores  removeNonPrefixingUnderscores  addPrefix  addSuffix  toPascalCase  toCamelCase  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-numberofitems.html","title":"NumberOfItems","content":"NumberOfItems \n  \n  \n Config  \n  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-patternmatchformatting.html","title":"PatternMatchFormatting","content":"PatternMatchFormatting \n  \n  \n  \n isActualPatternMatch  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-raisewithtoomanyarguments.html","title":"RaiseWithTooManyArguments","content":"RaiseWithTooManyArguments \n  \n  \n  \n checkRaiseWithTooManyArgs  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-sourcelength.html","title":"SourceLength","content":"SourceLength \n  \n  \n Config  \n checkSourceLengthRule  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-tupleformatting.html","title":"TupleFormatting","content":"TupleFormatting \n  \n  \n  \n isActualTuple  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-resources.html","title":"Resources","content":"Resources \n <p>Provides a way of getting string values from the framework's resource files (files in src/FSharpLint.Framework/Resources/).\nUsed to retrieve multi-lingual strings inside of the app.</p>\n\n \n ( .ctor )  GetString <p>Returns the value of the specified string resource for a given culture.</p>\n\n GetString <p>Returns the value of the specified string resource for the current culture.</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-application-lint-buildfailure.html","title":"BuildFailure","content":"BuildFailure \n  \n InvalidProjectFileMessage "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-application-lint-configurationparam.html","title":"ConfigurationParam","content":"ConfigurationParam \n  \n Configuration  FromFile  Default <p>Tries to load the config from file <code>fsharplint.json</code>.\nIf this file doesn't exist or is invalid, falls back to the default configuration.</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-application-lint-context.html","title":"Context","content":"Context \n  \n IndentationRuleContext  NoTabCharactersRuleContext "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-application-lint-lintfailure.html","title":"LintFailure","content":"LintFailure \n <p>Reason for the linter failing.</p>\n\n \n Description  ProjectFileCouldNotBeFound <p>Project file path did not exist on the local filesystem.</p>\n\n MSBuildFailedToLoadProjectFile <p>Received exception when trying to get the list of F# file from the project file.</p>\n\n FailedToLoadConfig <p>Failed to load a FSharpLint configuration file.</p>\n\n FailedToLoadFile <p>The specified file for linting could not be found.</p>\n\n RunTimeConfigError <p>Failed to analyse a loaded FSharpLint configuration at runtime e.g. invalid hint.</p>\n\n FailedToParseFile <p><code>FSharp.Compiler.Services</code> failed when trying to parse a file.</p>\n\n FailedToParseFilesInProject <p><code>FSharp.Compiler.Services</code> failed when trying to parse one or more files in a project.</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-application-lint-lintresult.html","title":"LintResult","content":"LintResult \n <p>Result of running the linter.</p>\n\n \n TryGetFailure  TryGetSuccess  Success  Failure "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-application-lint-optionallintparameters.html","title":"OptionalLintParameters","content":"OptionalLintParameters \n <p>Optional parameters that can be provided to the linter.</p>\n\n \n Default  CancellationToken <p>Cancels a lint in progress.</p>\n\n Configuration <p>Lint configuration to use.\nCan either specify a full configuration object, or a path to a file to load the configuration from.\nYou can also explicitly specify the default configuration.</p>\n\n ReceivedWarning <p>This function will be called every time the linter finds a broken rule.</p>\n\n ReportLinterProgress "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-application-lint-parsedfileinformation.html","title":"ParsedFileInformation","content":"ParsedFileInformation \n <p>If your application has already parsed the F# source files using <code>FSharp.Compiler.Services</code>\nyou want to lint then this can be used to provide the parsed information to prevent the\nlinter from parsing the file again.</p>\n\n \n Ast <p>File represented as an AST.</p>\n\n Source <p>Contents of the file.</p>\n\n TypeCheckResults <p>Optional results of inferring the types on the AST (allows for a more accurate lint).</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-application-lint-projectprogress.html","title":"ProjectProgress","content":"ProjectProgress \n <p>Provides information on what the linter is currently doing.</p>\n\n \n FilePath <p>Path of the F# file the progress information is for.</p>\n\n Starting <p>Started parsing a file (file path).</p>\n\n ReachedEnd <p>Finished parsing a file (file path).</p>\n\n Failed <p>Failed to parse a file (file path, exception that caused failure).</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-abstractsyntaxarray-currentnode.html","title":"CurrentNode","content":"CurrentNode \n <p>Contains information on the current node being visited.</p>\n\n \n Node  ChildNodes  Breadcrumbs <p>A list of parent nodes e.g. parent, grand parent, grand grand parent.</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-abstractsyntaxarray-node.html","title":"Node","content":"Node \n  \n Hashcode  Actual  ParentIndex  NumberOfChildren "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-abstractsyntaxarray-syntaxnode.html","title":"SyntaxNode","content":"SyntaxNode \n  \n Identifier  Null  Expression  FuncApp  Unit  AddressOf  Paren  If  Else  Lambda  LambdaArg  LambdaBody  ArrayOrList  Tuple  Wildcard  ConstantBool  ConstantByte  ConstantChar  ConstantDecimal  ConstantDouble  ConstantInt16  ConstantInt32  ConstantInt64  ConstantIntPtr  ConstantSByte  ConstantSingle  ConstantString  ConstantUInt16  ConstantUInt32  ConstantUInt64  ConstantUIntPtr  ConstantBytes  ModuleOrNamespace  ModuleDeclaration  Binding  TypeDefinition  Field  Type  Match  EnumCase  UnionCase  MemberDefinition  ExceptionRepresentation  TypeSimpleRepresentation  Cons  And  Or  Pattern  Other "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-ast-astnode.html","title":"AstNode","content":"AstNode \n <p>Nodes in the AST to be visited.</p>\n\n \n Expression  Pattern  SimplePattern  SimplePatterns  ModuleOrNamespace  ModuleDeclaration  Binding  TypeDefinition  MemberDefinition  ComponentInfo  ExceptionRepresentation  UnionCase  EnumCase  TypeRepresentation  TypeSimpleRepresentation  Type  Field  Match  ConstructorArguments  TypeParameter  InterfaceImplementation  Identifier  File  LambdaBody  LambdaArg  Else "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-ast-lambda.html","title":"Lambda","content":"Lambda \n  \n Arguments  Body "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-astinfo-identifiertype.html","title":"IdentifierType","content":"IdentifierType \n  \n Member  Function  Value  Constructor  Property  Other "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-bindingconfig.html","title":"BindingConfig","content":"BindingConfig \n  \n Flatten  favourIgnoreOverLetWild  wildcardNamedWithAsPattern  uselessBinding  tupleOfWildcards  favourTypedIgnore "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-configuration.html","title":"Configuration","content":"Configuration \n  \n Zero  Global  formatting <p>DEPRECATED, provide formatting rules at root level.</p>\n\n conventions <p>DEPRECATED, provide conventions rules at root level.</p>\n\n typography <p>DEPRECATED, provide typography rules at root level.</p>\n\n ignoreFiles  Hints  TypedItemSpacing  TypePrefixing  UnionDefinitionIndentation  ModuleDeclSpacing  ClassMemberSpacing  TupleCommaSpacing  TupleIndentation  TupleParentheses  PatternMatchClausesOnNewLine  PatternMatchOrClausesOnNewLine  PatternMatchClauseIndentation  PatternMatchExpressionIndentation  RecursiveAsyncFunction  AvoidTooShortNames  RedundantNewKeyword  FavourReRaise  FavourStaticEmptyFields  AsyncExceptionWithoutReturn  UnneededRecKeyword  NestedStatements  FavourConsistentThis  CyclomaticComplexity  ReimplementsFunction  CanBeReplacedWithComposition  AvoidSinglePipeOperator  UsedUnderscorePrefixedElements  FailwithBadUsage  RaiseWithSingleArgument  FailwithWithSingleArgument  NullArgWithSingleArgument  InvalidOpWithSingleArgument  InvalidArgWithTwoArguments  FailwithfWithArgumentsMatchingFormatString  MaxLinesInLambdaFunction  MaxLinesInMatchLambdaFunction  MaxLinesInValue  MaxLinesInFunction  MaxLinesInMember  MaxLinesInConstructor  MaxLinesInProperty  MaxLinesInModule  MaxLinesInRecord  MaxLinesInEnum  MaxLinesInUnion  MaxLinesInClass  InterfaceNames  GenericTypesNames  ExceptionNames  TypeNames  RecordFieldNames  EnumCasesNames  UnionCasesNames  ModuleNames  LiteralNames  NamespaceNames  MemberNames  ParameterNames  MeasureTypeNames  ActivePatternNames  PublicValuesNames  NonPublicValuesNames  PrivateValuesNames  InternalValuesNames  MaxNumberOfItemsInTuple  MaxNumberOfFunctionParameters  MaxNumberOfMembers  MaxNumberOfBooleanOperatorsInCondition  FavourIgnoreOverLetWild  FavourTypedIgnore  WildcardNamedWithAsPattern  UselessBinding  TupleOfWildcards  Indentation  MaxCharactersOnLine  TrailingWhitespaceOnLine  MaxLinesInFile  TrailingNewLineInFile  NoTabCharacters  NoPartialFunctions  SuggestUseAutoProperty "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-configurationexception.html","title":"ConfigurationException","content":"ConfigurationException \n  \n Data0 "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-conventionsconfig.html","title":"ConventionsConfig","content":"ConventionsConfig \n  \n Flatten  recursiveAsyncFunction  avoidTooShortNames  redundantNewKeyword  favourStaticEmptyFields  asyncExceptionWithoutReturn  unneededRecKeyword  nestedStatements  cyclomaticComplexity  reimplementsFunction  canBeReplacedWithComposition  avoidSinglePipeOperator  raiseWithTooManyArgs  sourceLength  naming  numberOfItems  binding  favourReRaise  favourConsistentThis  suggestUseAutoProperty  usedUnderscorePrefixedElements "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-enabledconfig.html","title":"EnabledConfig","content":"EnabledConfig \n  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-formattingconfig.html","title":"FormattingConfig","content":"FormattingConfig \n  \n Flatten  typedItemSpacing  typePrefixing  unionDefinitionIndentation  moduleDeclSpacing  classMemberSpacing  tupleFormatting  patternMatchFormatting "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-globalconfig.html","title":"GlobalConfig","content":"GlobalConfig \n  \n numIndentationSpaces "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-hintconfig.html","title":"HintConfig","content":"HintConfig \n  \n add  ignore "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-linerules.html","title":"LineRules","content":"LineRules \n  \n GenericLineRules  NoTabCharactersRule  IndentationRule "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-loadedrules.html","title":"LoadedRules","content":"LoadedRules \n  \n GlobalConfig  AstNodeRules  LineRules  DeprecatedRules "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-namesconfig.html","title":"NamesConfig","content":"NamesConfig \n  \n Flatten  interfaceNames  genericTypesNames  exceptionNames  typeNames  recordFieldNames  enumCasesNames  unionCasesNames  moduleNames  literalNames  namespaceNames  memberNames  parameterNames  measureTypeNames  activePatternNames  publicValuesNames  nonPublicValuesNames  privateValuesNames  internalValuesNames "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-numberofitemsconfig.html","title":"NumberOfItemsConfig","content":"NumberOfItemsConfig \n  \n Flatten  maxNumberOfItemsInTuple  maxNumberOfFunctionParameters  maxNumberOfMembers  maxNumberOfBooleanOperatorsInCondition "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-patternmatchformattingconfig.html","title":"PatternMatchFormattingConfig","content":"PatternMatchFormattingConfig \n  \n Flatten  patternMatchClausesOnNewLine  patternMatchOrClausesOnNewLine  patternMatchClauseIndentation  patternMatchExpressionIndentation "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-raisewithtoomanyargsconfig.html","title":"RaiseWithTooManyArgsConfig","content":"RaiseWithTooManyArgsConfig \n  \n Flatten  failwithBadUsage  raiseWithSingleArgument  nullArgWithSingleArgument  invalidOpWithSingleArgument  invalidArgWithTwoArguments  failwithfWithArgumentsMatchingFormatString "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-ruleconfig-1.html","title":"RuleConfig<'Config>","content":"RuleConfig<'Config> \n  \n Enabled  Config "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-sourcelengthconfig.html","title":"SourceLengthConfig","content":"SourceLengthConfig \n  \n Flatten  maxLinesInLambdaFunction  maxLinesInMatchLambdaFunction  maxLinesInValue  maxLinesInFunction  maxLinesInMember  maxLinesInConstructor  maxLinesInProperty  maxLinesInModule  maxLinesInRecord  maxLinesInEnum  maxLinesInUnion  maxLinesInClass "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-tupleformattingconfig.html","title":"TupleFormattingConfig","content":"TupleFormattingConfig \n  \n Flatten  tupleCommaSpacing  tupleIndentation  tupleParentheses "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-typographyconfig.html","title":"TypographyConfig","content":"TypographyConfig \n  \n Flatten  indentation  maxCharactersOnLine  trailingWhitespaceOnLine  maxLinesInFile  trailingNewLineInFile  noTabCharacters "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-fsharpjsonconverter-optionconverter.html","title":"OptionConverter","content":"OptionConverter \n  \n ( .ctor ) "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-ignorefiles-ignore.html","title":"Ignore","content":"Ignore \n  \n Ignore  Negate "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-configuration-ignorefiles-isdirectory.html","title":"IsDirectory","content":"IsDirectory \n  \n IsDirectory "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-constant.html","title":"Constant","content":"Constant \n  \n Byte  Bytes  Char  Decimal  Double  Int16  Int32  Int64  IntPtr  SByte  Single  UInt16  UInt32  UInt64  UIntPtr  UserNum  String  Unit  Bool "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-expression.html","title":"Expression","content":"Expression \n  \n FunctionApplication  InfixOperator  PrefixOperator  AddressOf  Wildcard  Variable  Identifier  Constant  Parentheses  Lambda  LambdaBody  LambdaArg  Tuple  List  Array  If  Else  Null "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-hint.html","title":"Hint","content":"Hint \n  \n MatchedNode  Suggestion "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-hintnode.html","title":"HintNode","content":"HintNode \n  \n HintPat  HintExpr "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-lambdaarg.html","title":"LambdaArg","content":"LambdaArg \n  \n LambdaArg "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-lambdabody.html","title":"LambdaBody","content":"LambdaBody \n  \n LambdaBody "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-pattern.html","title":"Pattern","content":"Pattern \n  \n Cons  Or  Wildcard  Variable  Identifier  Constant  Parentheses  Tuple  List  Array  Null "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-suggestion.html","title":"Suggestion","content":"Suggestion \n  \n Expr  Message "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-mergesyntaxtrees-edges.html","title":"Edges","content":"Edges \n  \n Empty  Lookup  AnyMatch "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-mergesyntaxtrees-node.html","title":"Node","content":"Node \n  \n Edges  MatchedHint "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-hintparser-mergesyntaxtrees-syntaxhintnode.html","title":"SyntaxHintNode","content":"SyntaxHintNode \n  \n Identifier  Null  Expression  FuncApp  Unit  AddressOf  If  Else  Lambda  LambdaArg  LambdaBody  ArrayOrList  Tuple  Variable  Wildcard  ConstantBool  ConstantByte  ConstantChar  ConstantDecimal  ConstantDouble  ConstantInt16  ConstantInt32  ConstantInt64  ConstantIntPtr  ConstantSByte  ConstantSingle  ConstantString  ConstantUInt16  ConstantUInt32  ConstantUInt64  ConstantUIntPtr  ConstantBytes  ConstantUserNum  Cons  And  Or "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-parsefile-fileparseinfo.html","title":"FileParseInfo","content":"FileParseInfo \n <p>Information for a file to be linted that is given to the analysers.</p>\n\n \n Text <p>Contents of the file.</p>\n\n Ast <p>File represented as an AST.</p>\n\n TypeCheckResults <p>Optional results of inferring the types on the AST (allows for a more accurate lint).</p>\n\n File <p>Path to the file.</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-parsefile-parsefilefailure.html","title":"ParseFileFailure","content":"ParseFileFailure \n  \n FailedToParseFile  AbortedTypeCheck "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-parsefile-parsefileresult-1.html","title":"ParseFileResult<'T>","content":"ParseFileResult<'T> \n  \n Failed  Success "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-astnoderuleconfig.html","title":"AstNodeRuleConfig","content":"AstNodeRuleConfig \n  \n Runner  Cleanup "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-astnoderuleparams.html","title":"AstNodeRuleParams","content":"AstNodeRuleParams \n  \n AstNode  NodeHashcode  NodeIndex  SyntaxArray  GetParents  FilePath  FileContent  Lines  CheckInfo  GlobalConfig "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-globalruleconfig.html","title":"GlobalRuleConfig","content":"GlobalRuleConfig \n  \n Default  numIndentationSpaces "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-indentationruleconfig.html","title":"IndentationRuleConfig","content":"IndentationRuleConfig \n  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-lineruleconfig.html","title":"LineRuleConfig","content":"LineRuleConfig \n  \n Runner "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-lineruleconfigwithcontext-1.html","title":"LineRuleConfigWithContext<'Context>","content":"LineRuleConfigWithContext<'Context> \n  \n Runner "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-lineruleparams.html","title":"LineRuleParams","content":"LineRuleParams \n  \n Line  LineNumber  IsLastLine  FilePath  FileContent  Lines  GlobalConfig "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-namingcase.html","title":"NamingCase","content":"NamingCase \n  \n PascalCase  CamelCase "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-namingconfig.html","title":"NamingConfig","content":"NamingConfig \n  \n Naming  Underscores  Prefix  Suffix "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-namingruleconfig.html","title":"NamingRuleConfig","content":"NamingRuleConfig \n  \n Config  GetIdentifiersToCheck "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-namingunderscores.html","title":"NamingUnderscores","content":"NamingUnderscores \n  \n None  AllowPrefix  AllowAny "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-notabcharactersruleconfig.html","title":"NoTabCharactersRuleConfig","content":"NoTabCharactersRuleConfig \n  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-rule.html","title":"Rule","content":"Rule \n  \n AstNodeRule  LineRule  IndentationRule  NoTabCharactersRule "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-rules-rulemetadata-1.html","title":"RuleMetadata<'Config>","content":"RuleMetadata<'Config> \n  \n Name  Identifier  RuleConfig "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-suggestion-lintwarning.html","title":"LintWarning","content":"LintWarning \n <p>A lint \"warning\", sources the location of the warning with a suggestion on how it may be fixed.</p>\n\n \n RuleIdentifier <p>Unique identifier for the rule that caused the warning.</p>\n\n RuleName <p>Unique name for the rule that caused the warning.</p>\n\n FilePath <p>Path to the file where the error occurs.</p>\n\n ErrorText <p>Text that caused the error (the <code>Range</code> of the content of <code>FileName</code>).</p>\n\n Details <p>Details for the warning.</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-suggestion-suggestedfix.html","title":"SuggestedFix","content":"SuggestedFix \n <p>Information for consuming applications to provide an automated fix for a lint suggestion.</p>\n\n \n FromText <p>Text to be replaced.</p>\n\n FromRange <p>Location of the text to be replaced.</p>\n\n ToText <p>Text to replace the <code>FromText</code>, i.e. the fix.</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-suggestion-warningdetails.html","title":"WarningDetails","content":"WarningDetails \n  \n Range <p>Location of the code that prompted the suggestion.</p>\n\n Message <p>Suggestion message to describe the possible problem to the user.</p>\n\n SuggestedFix <p>Information to provide an automated fix.</p>\n\n TypeChecks <p>Type checks to be performed to confirm this suggestion is valid.\nSuggestion is only considered valid when all type checks resolve to true.</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-suppression-linesuppression.html","title":"LineSuppression","content":"LineSuppression \n <p>Specifies the suppressions for an individual line.</p>\n\n \n Line  Suppressions "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-framework-suppression-suppressioninfo.html","title":"SuppressionInfo","content":"SuppressionInfo \n <p>Represents rule suppression information.</p>\n\n \n Enable <p>Re-enables rules for the rest of the file.</p>\n\n Disable <p>Disables rules for the rest of the file.</p>\n\n DisableLine <p>Disables rules for a single line.</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-cyclomaticcomplexity-config.html","title":"Config","content":"Config \n <p>Configuration of the cyclomatic complexity (FL0069) rule.</p>\n\n \n MaxComplexity <p>The maximum cyclomatic complexity for a function or method before an issue is flagged.</p>\n\n"},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-failwithbadusage-location.html","title":"Location","content":"Location \n  \n FileName  StartLine  StartColumn "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-favourconsistentthis-config.html","title":"Config","content":"Config \n <p>Configuration of the favour consistent 'this' (FL0074) rule.</p>\n\n \n Symbol "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-hintmatcher-config.html","title":"Config","content":"Config \n  \n HintTrie "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxcharactersonline-config.html","title":"Config","content":"Config \n  \n MaxCharactersOnLine "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-maxlinesinfile-config.html","title":"Config","content":"Config \n  \n MaxLinesInFile "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-nestedstatements-config.html","title":"Config","content":"Config \n  \n Depth "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-nopartialfunctions-config.html","title":"Config","content":"Config \n  \n AllowedPartials  AdditionalPartials "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-patternmatchclauseindentation-config.html","title":"Config","content":"Config \n  \n AllowSingleLineLambda "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-trailingwhitespaceonline-config.html","title":"Config","content":"Config \n  \n NumberOfSpacesAllowed  OneSpaceAllowedAfterOperator  IgnoreBlankLines "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-typeprefixing-config.html","title":"Config","content":"Config \n  \n Mode "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-typeprefixing-mode.html","title":"Mode","content":"Mode \n  \n Hybrid  Always  Never "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-typeditemspacing-config.html","title":"Config","content":"Config \n  \n TypedItemStyle "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-typeditemspacing-typeditemstyle.html","title":"TypedItemStyle","content":"TypedItemStyle \n  \n NoSpaces  SpaceAfter  SpacesAround "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-naming-accesscontrollevel.html","title":"AccessControlLevel","content":"AccessControlLevel \n <p>Specifies access control level as described in\n<a href=\"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/access-control\">https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/access-control</a> .\nHigher levels also include lower levels, so e.g. identifier marked with Public\nis also accessible in Internal and Private scopes.\nPublic scope is the widest, then goes Internal, then Private.</p>\n\n \n Public  Private  Internal "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-naming-getidents-1.html","title":"GetIdents<'T>","content":"GetIdents<'T> \n  \n "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-numberofitems-config.html","title":"Config","content":"Config \n  \n MaxItems "},{"uri":"https://fsprojects.github.io/FSharpLint/reference/FSharpLint.Core/fsharplint-rules-helper-sourcelength-config.html","title":"Config","content":"Config \n  \n MaxLines "}]